From a2d3b4e2bc89595ccbe8f3aef74229d0bb69115e Mon Sep 17 00:00:00 2001
From: Janko Simonovic <simonovic86@gmail.com>
Date: Tue, 8 May 2018 18:16:05 +0200
Subject: [PATCH 21/22] fix importer zk handling (#111)

---
 modules/gs1-importer.js | 238 +++++++++++-------------------------------------
 1 file changed, 51 insertions(+), 187 deletions(-)

diff --git a/modules/gs1-importer.js b/modules/gs1-importer.js
index 7d65f34..983b5bd 100644
--- a/modules/gs1-importer.js
+++ b/modules/gs1-importer.js
@@ -18,7 +18,6 @@ function sanitize(old_obj, new_obj, patterns) {
         for (const i in patterns) {
             new_key = new_key.replace(patterns[i], '');
         }
-
         new_obj[new_key] = sanitize(old_obj[key], {}, patterns);
     }
 
@@ -26,15 +25,6 @@ function sanitize(old_obj, new_obj, patterns) {
 }
 
 // validate
-function providerIdValidation(provider_id, validation_object) {
-    const data = provider_id;
-    const object = validation_object;
-    if (data.length === 12) {
-        return true;
-    }
-    return false;
-}
-
 function emailValidation(email) {
     const result = validator.isEmail(email);
 
@@ -46,129 +36,7 @@ function emailValidation(email) {
 
 function dateTimeValidation(date) {
     const result = validator.isISO8601(date);
-
-    if (result) {
-        return true;
-    }
-    return false;
-}
-
-function countryValidation(country) {
-    const postal_code = country;
-
-    if (postal_code.length > 2) {
-        return false;
-    }
-    return true;
-}
-
-function postalCodeValidation(code) {
-    const result = validator.isNumeric(code);
-
-    if (result) {
-        return true;
-    }
-    return false;
-}
-
-function longLatValidation(data) {
-    const result = validator.isLatLong(data);
-    if (result) {
-        return true;
-    }
-    return false;
-}
-
-function ean13Validation(eanCode) {
-    // Check if only digits
-    const ValidChars = '0123456789';
-    for (let i = 0; i < eanCode.length; i += 1) {
-        const digit = eanCode.charAt(i);
-        if (ValidChars.indexOf(digit) === -1) {
-            return false;
-        }
-    }
-
-    // Add five 0 if the code has only 8 digits or 12
-    if (eanCode.length === 8) {
-        eanCode = `00000${eanCode}`;
-    } else if (eanCode.length === 12) {
-        eanCode = `0${eanCode}`;
-    }
-
-    // Check for 13 digits otherwise
-    if (eanCode.length !== 13) {
-        return false;
-    }
-
-    // Get the check number
-    const originalCheck = parseInt(eanCode.substring(eanCode.length - 1), 10);
-    eanCode = eanCode.substring(0, eanCode.length - 1);
-
-    // Add even numbers together
-    let even = Number(eanCode.charAt(1)) +
-        Number(eanCode.charAt(3)) +
-        Number(eanCode.charAt(5)) +
-        Number(eanCode.charAt(7)) +
-        Number(eanCode.charAt(9)) +
-        Number(eanCode.charAt(11));
-    // Multiply this result by 3
-    even *= 3;
-
-    // Add odd numbers together
-    const odd = Number(eanCode.charAt(0)) +
-        Number(eanCode.charAt(2)) +
-        Number(eanCode.charAt(4)) +
-        Number(eanCode.charAt(6)) +
-        Number(eanCode.charAt(8)) +
-        Number(eanCode.charAt(10));
-
-    // Add two totals together
-    const total = even + odd;
-
-    // Calculate the checksum
-    // Divide total by 10 and store the remainder
-    let checksum = total % 10;
-    // If result is not 0 then take away 10
-    if (checksum !== 0) {
-        checksum = 10 - checksum;
-    }
-
-    // Return the result
-    if (checksum !== originalCheck) {
-        return false;
-    }
-
-    return true;
-}
-
-function numberValidation(num) {
-    const number = validator.isDecimal(num, { locale: 'en-AU' });
-
-    if (number) {
-        return true;
-    }
-    return false;
-}
-
-function ethWalletValidation(wallet) {
-    const eth_wallet = wallet;
-
-    const first_char = eth_wallet.charAt(0);
-    const second_char = eth_wallet.charAt(1);
-    const rest = eth_wallet.substr(2);
-    const rest_hex = validator.isHexadecimal(rest);
-
-    var valid = false;
-
-    if (rest_hex && rest.length === 40) {
-        valid = true;
-    }
-
-    if (first_char === '0' && second_char === 'x' && valid) {
-        return true;
-    }
-    return false;
+    return !!result;
 }
 
 function arrayze(value) {
@@ -200,10 +68,6 @@ function ignorePattern(attribute, ignorePattern) {
 }
 
 function parseLocations(vocabularyElementList) {
-    /*
-        { type: 'urn:ot:mda:location',
-            VocabularyElementList: { VocabularyElement: [Object] } } ]
-     */
     const locations = [];
 
     // May be an array in VocabularyElement.
@@ -226,11 +90,6 @@ function parseLocations(vocabularyElementList) {
 }
 
 function parseActors(vocabularyElementList) {
-    /*
-        { type: 'urn:ot:mda:actor',
-            VocabularyElementList: { VocabularyElement: [Object] } } ]
-     */
-
     const actors = [];
 
     // May be an array in VocabularyElement.
@@ -250,11 +109,6 @@ function parseActors(vocabularyElementList) {
 }
 
 function parseProducts(vocabularyElementList) {
-    /*
-        { type: 'urn:ot:mda:product',
-            VocabularyElementList: { VocabularyElement: [Object] } } ]
-     */
-
     const products = [];
 
     // May be an array in VocabularyElement.
@@ -274,11 +128,6 @@ function parseProducts(vocabularyElementList) {
 }
 
 function parseBatches(vocabularyElementList) {
-    /*
-        { type: 'urn:ot:mda:batch',
-            VocabularyElementList: { VocabularyElement: [Array] } } ]
-     */
-
     const batches = [];
 
     // May be an array in VocabularyElement.
@@ -657,42 +506,57 @@ async function processXML(err, result) {
             }
         } else {
             const { inputQuantityList, outputQuantityList } = event;
-            for (const inputQuantity of inputQuantityList) {
-                // eslint-disable-next-line
-                const vertex = await db.getVertexWithMaxVersion(inputQuantity.object);
-                if (vertex) {
-                    const quantities = vertex.data.quantities.private;
-                    const quantity = {
-                        object: inputQuantity.object,
-                        quantity: parseInt(quantities.quantity, 10),
-                        r: quantities.r,
-                    };
-                    inputQuantities.push(quantity);
-                } else {
-                    inputQuantities.push({
-                        added: true,
-                        object: inputQuantity.object,
-                        quantity: parseInt(inputQuantity.quantity, 10),
-                    });
+            if (inputQuantityList) {
+                const tmpInputQuantities = arrayze(inputQuantityList.quantityElement).map(elem => ({
+                    object: elem.epcClass,
+                    quantity: parseInt(elem.quantity, 10),
+                    r: GLOBAL_R,
+                }));
+                for (const inputQuantity of tmpInputQuantities) {
+                    // eslint-disable-next-line
+                    const vertex = await db.getVertexWithMaxVersion(inputQuantity.object);
+                    if (vertex) {
+                        const quantities = vertex.data.quantities.private;
+                        const quantity = {
+                            object: inputQuantity.object,
+                            quantity: parseInt(quantities.quantity, 10),
+                            r: quantities.r,
+                        };
+                        inputQuantities.push(quantity);
+                    } else {
+                        inputQuantities.push({
+                            added: true,
+                            object: inputQuantity.object,
+                            quantity: parseInt(inputQuantity.quantity, 10),
+                        });
+                    }
                 }
             }
-            for (const outputQuantity of outputQuantityList) {
-                // eslint-disable-next-line
-                const vertex = await db.getVertexWithMaxVersion(outputQuantity.object);
-                if (vertex) {
-                    const quantities = vertex.data.quantities.private;
-                    const quantity = {
-                        object: outputQuantity.object,
-                        quantity: parseInt(quantities.quantity, 10),
-                        r: quantities.r,
-                    };
-                    outputQuantities.push(quantity);
-                } else {
-                    outputQuantities.push({
-                        added: true,
-                        object: outputQuantity.object,
-                        quantity: parseInt(outputQuantity.quantity, 10),
-                    });
+            if (outputQuantityList) {
+                const tmpOutputQuantities = arrayze(outputQuantityList.quantityElement)
+                    .map(elem => ({
+                        object: elem.epcClass,
+                        quantity: parseInt(elem.quantity, 10),
+                        r: GLOBAL_R,
+                    }));
+                for (const outputQuantity of tmpOutputQuantities) {
+                    // eslint-disable-next-line
+                    const vertex = await db.getVertexWithMaxVersion(outputQuantity.object);
+                    if (vertex) {
+                        const quantities = vertex.data.quantities.private;
+                        const quantity = {
+                            object: outputQuantity.object,
+                            quantity: parseInt(quantities.quantity, 10),
+                            r: quantities.r,
+                        };
+                        outputQuantities.push(quantity);
+                    } else {
+                        outputQuantities.push({
+                            added: true,
+                            object: outputQuantity.object,
+                            quantity: parseInt(outputQuantity.quantity, 10),
+                        });
+                    }
                 }
             }
         }
@@ -705,7 +569,7 @@ async function processXML(err, result) {
                     if (batch.identifiers.uid === quantity.object) {
                         batchFound = true;
                         batch.data.quantities = quantity;
-                        batch._key = md5(`batch_${senderId}_${batch.data}`);
+                        batch._key = md5(`batch_${senderId}_${JSON.stringify(batch.identifiers)}_${JSON.stringify(batch.data)}`);
                         break;
                     }
                 }
-- 
2.13.5 (Apple Git-94)

