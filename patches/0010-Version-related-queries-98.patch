From a53d57d3dd43a73c954f87a56dedb3e9ebfce02c Mon Sep 17 00:00:00 2001
From: Janko Simonovic <simonovic86@gmail.com>
Date: Sat, 5 May 2018 21:27:40 +0200
Subject: [PATCH 10/22] Version related queries (#98)

* add version related queries

* fix methods

* add methods to graph storage
---
 modules/Database/Arangojs.js     | 50 ++++++++++++++++++++++++++++++++++++++++
 modules/Database/GraphStorage.js | 39 +++++++++++++++++++++++++++++++
 2 files changed, 89 insertions(+)

diff --git a/modules/Database/Arangojs.js b/modules/Database/Arangojs.js
index b071ceb..dcda161 100644
--- a/modules/Database/Arangojs.js
+++ b/modules/Database/Arangojs.js
@@ -45,6 +45,56 @@ class ArangoJS {
     }
 
     /**
+     * Gets max version where uid is the same but not the _key
+     * @param uid   Vertex uid
+     * @param _key  Vertex _key
+     * @return {Promise<void>}
+     */
+    getCurrentMaxVersion(uid, _key) {
+        return new Promise((resolve, reject) => {
+            const queryString = 'FOR v IN ot_vertices ' +
+                'FILTER v.identifiers.uid == @uid AND AND v._key != @_key ' +
+                'SORT v.version DESC ' +
+                'LIMIT 1 ' +
+                'RETURN v.version';
+            const params = {
+                uid,
+                _key,
+            };
+
+            this.runQuery(queryString, params).then((result) => {
+                resolve(result);
+            }).catch((err) => {
+                reject(err);
+            });
+        });
+    }
+
+    /**
+     * Gets max vertex_key where uid is the same and has the max version
+     * @param uid   Vertex uid
+     * @return {Promise<void>}
+     */
+    getVertexKeyWithMaxVersion(uid) {
+        return new Promise((resolve, reject) => {
+            const queryString = 'FOR v IN ot_vertices ' +
+                'FILTER v.identifiers.uid == @uid ' +
+                'SORT v.version DESC ' +
+                'LIMIT 1 ' +
+                'RETURN v.vertex_key';
+            const params = {
+                uid,
+            };
+
+            this.runQuery(queryString, params).then((result) => {
+                resolve(result);
+            }).catch((err) => {
+                reject(err);
+            });
+        });
+    }
+
+    /**
      * Run query on ArangoDB graph database
      * @param {string} - queryString
      * @param {object} - params
diff --git a/modules/Database/GraphStorage.js b/modules/Database/GraphStorage.js
index cb90b6d..bca6463 100644
--- a/modules/Database/GraphStorage.js
+++ b/modules/Database/GraphStorage.js
@@ -57,6 +57,45 @@ class GraphStorage {
     }
 
     /**
+     * Gets max version where uid is the same but not the _key
+     * @param uid   Vertex uid
+     * @param _key  Vertex _key
+     * @return {Promise<void>}
+     */
+    getCurrentMaxVersion(uid, _key) {
+        return new Promise((resolve, reject) => {
+            if (!this.db) {
+                reject(Error('Not connected to graph database'));
+            } else {
+                this.db.getCurrentMaxVersion(uid, _key).then((result) => {
+                    resolve(result);
+                }).catch((err) => {
+                    reject(err);
+                });
+            }
+        });
+    }
+
+    /**
+     * Gets max vertex_key where uid is the same and has the max version
+     * @param uid   Vertex uid
+     * @return {Promise<void>}
+     */
+    getVertexKeyWithMaxVersion(uid) {
+        return new Promise((resolve, reject) => {
+            if (!this.db) {
+                reject(Error('Not connected to graph database'));
+            } else {
+                this.db.getVertexKeyWithMaxVersion(uid).then((result) => {
+                    resolve(result);
+                }).catch((err) => {
+                    reject(err);
+                });
+            }
+        });
+    }
+
+    /**
      * Add new document into given collection on selected database
      * @param {string} - collectionName
      * @param {object} - document
-- 
2.13.5 (Apple Git-94)

