From b3a730e4da1a0aef7a622214bc1528bd650d525f Mon Sep 17 00:00:00 2001
From: radomir-sebek <rasho.ieee@gmail.com>
Date: Wed, 2 May 2018 22:13:14 +0200
Subject: [PATCH 05/22] Check does BC node rpc_node_host:rpc_node_port give
 back 200 status code (#90)

* Check does BC node rpc_node_host:rpc_node_port give back 200 status code

* small fix
---
 modules/Utilities.js           | 76 ++++++++++++++++++++++++++++++++++++++++++
 package.json                   |  5 +--
 test/modules/utilities.test.js | 23 +++++++++++++
 3 files changed, 102 insertions(+), 2 deletions(-)

diff --git a/modules/Utilities.js b/modules/Utilities.js
index 6cfeacd..477a437 100644
--- a/modules/Utilities.js
+++ b/modules/Utilities.js
@@ -8,6 +8,8 @@ const Storage = require('./Storage');
 const config = require('./Config');
 const _ = require('lodash');
 const randomString = require('randomstring');
+const Web3 = require('web3');
+const request = require('superagent');
 // eslint-disable-next-line  prefer-destructuring
 const Database = require('arangojs').Database;
 require('dotenv').config();
@@ -410,6 +412,80 @@ class Utilities {
             log.warn('Failed to create folder named data');
         }
     }
+
+    /**
+     * Check on which network blockchain is running on
+     * @returns {Promise<any>}
+     */
+    static getNodeNetworkType() {
+        return new Promise((resolve, reject) => {
+            this.loadSelectedBlockchainInfo().then((config) => {
+                const web3 = new Web3(new Web3.providers.HttpProvider(`${config.rpc_node_host}:${config.rpc_node_port}`));
+                web3.eth.net.getNetworkType()
+                    .then((result) => {
+                        resolve(result);
+                    }).catch((error) => {
+                        reject(error);
+                    });
+            }).catch((error) => {
+                reject(error);
+            });
+        });
+    }
+
+    /**
+     * Pings infura rinkeby api methods endpoint
+     * @returns {Promise<any>}
+     */
+    static getInfuraRinkebyApiMethods() {
+        return new Promise((resolve, reject) => {
+            request
+                .get('https://api.infura.io/v1/jsonrpc/rinkeby/methods')
+                .query('?token=1WRiEqAQ9l4SW6fGdiDt')
+                .then((res) => {
+                    resolve(res);
+                }).catch((err) => {
+                    reject(err);
+                });
+        });
+    }
+
+    /**
+     * Pings infura rinkeby api eth_blockNumber method endpoint
+     * @returns {Promise<any>}
+     */
+    static getBlockNumberInfuraRinkebyApiMethod() {
+        return new Promise((resolve, reject) => {
+            request
+                .get('https://api.infura.io/v1/jsonrpc/rinkeby/eth_blockNumber')
+                .query('?token=1WRiEqAQ9l4SW6fGdiDt')
+                .then((res) => {
+                    resolve(res);
+                }).catch((err) => {
+                    reject(err);
+                });
+        });
+    }
+
+    /**
+     * Gets block number from web3
+     * @returns {Promise<any>}
+     */
+    static getBlockNumberFromWeb3() {
+        return new Promise((resolve, reject) => {
+            this.loadSelectedBlockchainInfo().then((config) => {
+                const web3 = new Web3(new Web3.providers.HttpProvider(`${config.rpc_node_host}:${config.rpc_node_port}`));
+                web3.eth.getBlockNumber()
+                    .then((result) => {
+                        resolve(web3.utils.numberToHex(result));
+                    }).catch((error) => {
+                        reject(error);
+                    });
+            }).catch((error) => {
+                reject(error);
+            });
+        });
+    }
 }
 
 module.exports = Utilities;
diff --git a/package.json b/package.json
index d36c750..875fee6 100644
--- a/package.json
+++ b/package.json
@@ -72,9 +72,10 @@
     "solidity-sha3": "^0.4.1",
     "sqldown": "^2.1.0",
     "sqlite3": "^4.0.0",
+    "superagent": "^3.8.2",
+    "utf8-length": "latest",
     "web3": "^1.0.0-beta.33",
     "winston": "^2.4.1",
-    "xml2js": "^0.4.19",
-    "utf8-length": "latest"
+    "xml2js": "^0.4.19"
   }
 }
diff --git a/test/modules/utilities.test.js b/test/modules/utilities.test.js
index 9b7c189..d971aba 100644
--- a/test/modules/utilities.test.js
+++ b/test/modules/utilities.test.js
@@ -32,6 +32,29 @@ describe('Utilities module', () => {
         });
     });
 
+    it('getNodeNetworkType()', async () => {
+        await Utilities.getNodeNetworkType().then((result) => {
+            assert.equal(result, 'rinkeby');
+        }).catch((error) => {
+            console.log(error);
+        });
+    });
+
+    // way to check is rinkeby with our token healthy
+    it('getInfuraRinkebyApiMethods()', async () => {
+        const response = await Utilities.getInfuraRinkebyApiMethods();
+        assert.equal(response.statusCode, 200);
+        assert.containsAllKeys(response.body, ['get', 'post']);
+    });
+
+    // way to chech is method from rinkeby with our token healthy
+    it('getBlockNumberInfuraRinkebyApiMethod()', async () => {
+        const responseFromApi = await Utilities.getBlockNumberInfuraRinkebyApiMethod();
+        assert.equal(responseFromApi.statusCode, 200);
+        const responseFromWeb3 = await Utilities.getBlockNumberFromWeb3();
+        assert.equal(responseFromApi.body.result, responseFromWeb3);
+    });
+
     it('loadSelectedBlockchainInfo()', async () => {
         const myResult = await Utilities.loadSelectedBlockchainInfo();
         assert.hasAllKeys(myResult, ['blockchain_title', 'id', 'network_id', 'gas_limit',
-- 
2.13.5 (Apple Git-94)

