From 972b1e186095888f43b410f6c3ab357d3236071b Mon Sep 17 00:00:00 2001
From: radomir-sebek <rasho.ieee@gmail.com>
Date: Wed, 2 May 2018 22:14:42 +0200
Subject: [PATCH 06/22] [Improvement] Check do we have sufficient ETH and ATRAC
 in the node wallet (#92)

---
 modules/Utilities.js | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 ot-node.js           | 25 +++++++++++++++++++++++++
 2 files changed, 73 insertions(+)

diff --git a/modules/Utilities.js b/modules/Utilities.js
index 477a437..7308649 100644
--- a/modules/Utilities.js
+++ b/modules/Utilities.js
@@ -12,6 +12,7 @@ const Web3 = require('web3');
 const request = require('superagent');
 // eslint-disable-next-line  prefer-destructuring
 const Database = require('arangojs').Database;
+const Web3 = require('web3');
 require('dotenv').config();
 
 
@@ -335,6 +336,53 @@ class Utilities {
     }
 
     /**
+     * Get NODE_WALLETs balance in Ether
+     * @return {Promise<any>}
+     */
+    static getBalanceInEthers() {
+        return new Promise((resolve, reject) => {
+            this.loadSelectedBlockchainInfo().then((config) => {
+                const web3 = new Web3(new Web3.providers.HttpProvider(`${config.rpc_node_host}:${config.rpc_node_port}`));
+                web3.eth.getBalance(config.wallet_address).then((result) => {
+                    const balance = web3.utils.fromWei(result, 'ether');
+                    resolve(balance);
+                }).catch((error) => {
+                    reject(error);
+                });
+            }).catch((error) => {
+                reject(error);
+            });
+        });
+    }
+
+    /**
+     * Get NODE_WALLETs ATRAC token balance in Ether
+     * @return {Promise<any>}
+     */
+    static getAlphaTracTokenBalance() {
+        return new Promise((resolve, reject) => {
+            this.loadSelectedBlockchainInfo().then((config) => {
+                const web3 = new Web3(new Web3.providers.HttpProvider(`${config.rpc_node_host}:${config.rpc_node_port}`));
+                const wallet_address_minus0x = (config.wallet_address).substring(2);
+                // '0x70a08231' is the contract 'balanceOf()' ERC20 token function in hex.
+                var contractData = (`0x70a08231000000000000000000000000${wallet_address_minus0x}`);
+                web3.eth.call({
+                    to: config.token_contract_address,
+                    data: contractData,
+                }).then((result) => {
+                    const tokensInWei = web3.utils.toBN(result).toString();
+                    const tokensInEther = web3.utils.fromWei(tokensInWei, 'ether');
+                    resolve(tokensInEther);
+                }).catch((error) => {
+                    reject(error);
+                });
+            }).catch((error) => {
+                reject(error);
+            });
+        });
+    }
+
+    /**
      * Makes a copy of object
      *
      * @param object Obj
diff --git a/ot-node.js b/ot-node.js
index daf2ee5..2e3f319 100644
--- a/ot-node.js
+++ b/ot-node.js
@@ -84,6 +84,31 @@ class OTNode {
             console.log(err);
         }
 
+        // check does node_wallet has sufficient Ether and ATRAC tokens
+        try {
+            const etherBalance = deasync(Utilities.getBalanceInEthers());
+            if (etherBalance <= 0) {
+                console.log('Please get some ETH in the node wallet before running ot-node');
+                process.exit(1);
+            } else {
+                (
+                    log.info(`Initial balance of ETH: ${etherBalance}`)
+                );
+            }
+
+            const atracBalance = deasync(Utilities.getAlphaTracTokenBalance());
+            if (atracBalance <= 0) {
+                console.log('Please get some ATRAC in the node wallet before running ot-node');
+                process.exit(1);
+            } else {
+                (
+                    log.info(`Initial balance of ATRAC: ${atracBalance}`)
+                );
+            }
+        } catch (error) {
+            console.log(error);
+        }
+
         // wire instances
         GSInstance.db = new GraphStorage(selectedDatabase);
         BCInstance.bc = new Blockchain(selectedBlockchain);
-- 
2.13.5 (Apple Git-94)

