From 754260433bedeb177faacb6c496bc99ef74a45a6 Mon Sep 17 00:00:00 2001
From: Uros Kukic <33048701+Kuki145@users.noreply.github.com>
Date: Thu, 26 Apr 2018 12:17:14 +0200
Subject: [PATCH 01/22] Truffle implementation (#86)

---
 .gitignore                                         |   1 +
 .../Blockchain/Ethereum/contracts/Migrations.sol   |  45 +++++++++
 .../Ethereum/contracts/OTFingerprintStore.sol      |  88 +++++++++++++++++
 modules/Blockchain/Ethereum/desktop.ini            |   6 ++
 .../Ethereum/migrations/1_initial_migration.js     |   1 -
 .../Ethereum/migrations/2_escrow_migration.js      |  14 ---
 .../Ethereum/migrations/2_total_migration.js       | 108 +++++++++++++++++++++
 modules/Blockchain/Ethereum/test/escrow.test.js    |  57 ++++++++---
 modules/Blockchain/Ethereum/truffle.js             |  17 ++++
 package.json                                       |  10 +-
 10 files changed, 312 insertions(+), 35 deletions(-)
 create mode 100644 modules/Blockchain/Ethereum/contracts/Migrations.sol
 create mode 100644 modules/Blockchain/Ethereum/contracts/OTFingerprintStore.sol
 create mode 100644 modules/Blockchain/Ethereum/desktop.ini
 delete mode 100644 modules/Blockchain/Ethereum/migrations/2_escrow_migration.js
 create mode 100644 modules/Blockchain/Ethereum/migrations/2_total_migration.js

diff --git a/.gitignore b/.gitignore
index 31004cb..e95a41e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,6 +15,7 @@ node.log
 keys
 data
 modules/blockchain_interface/ethereum/build/*
+modules/Blockchain/Ethereum/build/
 hidden_service
 !*.gitkeep
 Envoy.blade.php
diff --git a/modules/Blockchain/Ethereum/contracts/Migrations.sol b/modules/Blockchain/Ethereum/contracts/Migrations.sol
new file mode 100644
index 0000000..235eff0
--- /dev/null
+++ b/modules/Blockchain/Ethereum/contracts/Migrations.sol
@@ -0,0 +1,45 @@
+pragma solidity ^0.4.17;
+
+
+
+contract Migrations {
+
+  address public owner;
+
+  uint public last_completed_migration;
+
+
+
+  modifier restricted() {
+
+    if (msg.sender == owner) _;
+
+  }
+
+
+
+  function Migrations() public {
+
+    owner = msg.sender;
+
+  }
+
+
+
+  function setCompleted(uint completed) public restricted {
+
+    last_completed_migration = completed;
+
+  }
+
+
+
+  function upgrade(address new_address) public restricted {
+
+    Migrations upgraded = Migrations(new_address);
+
+    upgraded.setCompleted(last_completed_migration);
+
+  }
+
+}
\ No newline at end of file
diff --git a/modules/Blockchain/Ethereum/contracts/OTFingerprintStore.sol b/modules/Blockchain/Ethereum/contracts/OTFingerprintStore.sol
new file mode 100644
index 0000000..3d8d6d9
--- /dev/null
+++ b/modules/Blockchain/Ethereum/contracts/OTFingerprintStore.sol
@@ -0,0 +1,88 @@
+pragma solidity ^0.4.18;
+contract Ownable {
+  address public owner;
+  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
+  /**
+   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
+   * account.
+   */
+  function Ownable() { owner = msg.sender; }
+  /**
+   * @dev Throws if called by any account other than the owner.
+   */
+  modifier onlyOwner() { require(msg.sender == owner); _; }
+  /**
+   * @dev Allows the current owner to transfer control of the contract to a newOwner.
+   * @param newOwner The address to transfer ownership to.
+   */
+  function transferOwnership(address newOwner) onlyOwner public {
+    require(newOwner != address(0));
+    OwnershipTransferred(owner, newOwner);
+    owner = newOwner;
+  }
+}
+contract OTFingerprintStore is Ownable{
+    /* utilities */
+    uint256 private weekInSeconds = 86400 * 7;
+    uint256 public _version;
+    /* Data Holder Fingerprint Store */ 
+    // mapping(address => mapping (bytes32 => bytes32)) public DHFS; 
+    mapping(address => mapping (bytes32 => bytes32[])) public DHFS; 
+    /* Agreement store */
+    struct Agreement {
+        uint256 startTime;
+        uint256 endTime;
+        bytes32 data_hash;
+    }
+    
+    mapping (address => mapping (address => Agreement[])) public agreements;
+    mapping (address => address[]) public agreementPartiesList;
+    event Fingerprint(address indexed dataHolder, string indexed batch_id, bytes32 indexed batch_id_hash, bytes32 graph_hash);
+    event Agreed(address indexed dataCreator, address indexed dataHolder, bytes32 indexed batch_id_hash, bytes32 graph_hash, uint256 startTime, uint256 endTime);
+    
+    
+    function OTHashStore(uint256 version){
+        _version = version;
+    }
+    function getVersion() public constant returns (uint256){
+        return _version;
+    }
+    /* Fingerprinting */
+    /* Store a fingerpring of a graph identified by batch_id and hash of batch_id */
+    function addFingerPrint(string batch_id, bytes32 batch_id_hash, bytes32 graph_hash) public returns (bool){
+        require(msg.sender!=address(0));
+        require(batch_id_hash!=0x0);
+        require(graph_hash!=0x0);
+        DHFS[msg.sender][batch_id_hash].push(graph_hash);
+        Fingerprint(msg.sender,batch_id,batch_id_hash,graph_hash);      
+    }
+    function getFingerprintByBatchHash(address dataHolder, bytes32 batch_id_hash) public constant returns (bytes32 fingerprint){
+        require(dataHolder!=address(0));
+        require(batch_id_hash!=0x0);
+        return DHFS[dataHolder][batch_id_hash][DHFS[dataHolder][batch_id_hash].length - 1];
+    }
+    /* Agreements */ 
+    function createAgreement(address dataHolder, uint256 startTime, uint256 endTime,bytes32 batch_id_hash, bytes32 data_hash) public returns (bool){
+        require(msg.sender!=address(0));
+        require(dataHolder!=address(0));
+        require(startTime>= now);
+        require(endTime > startTime);
+        Agreement memory newAgreement = Agreement({
+            startTime: startTime,
+            endTime: endTime,
+            data_hash: data_hash
+            });
+        agreementPartiesList[msg.sender].push(dataHolder);
+        agreements[msg.sender][dataHolder].push(newAgreement);
+        Agreed(msg.sender, dataHolder,batch_id_hash, data_hash, startTime,endTime);
+    }
+    
+    function getAgreementPartiesCount() public constant returns(uint partiesCount) {
+        return agreementPartiesList[msg.sender].length;
+    }
+    function getNumberOfAgreements(address party) public constant returns (uint agreementCount){
+        require(msg.sender!=address(0));
+        require(party!=address(0));
+        return agreements[msg.sender][party].length;
+    }
+}
\ No newline at end of file
diff --git a/modules/Blockchain/Ethereum/desktop.ini b/modules/Blockchain/Ethereum/desktop.ini
new file mode 100644
index 0000000..07445c0
--- /dev/null
+++ b/modules/Blockchain/Ethereum/desktop.ini
@@ -0,0 +1,6 @@
+[.ShellClassInfo]
+IconResource=C:\Users\Uros\Pictures\Icons\PRY set\Pry Black\Industrial Black.ico,0
+[ViewState]
+Mode=
+Vid=
+FolderType=Generic
diff --git a/modules/Blockchain/Ethereum/migrations/1_initial_migration.js b/modules/Blockchain/Ethereum/migrations/1_initial_migration.js
index 6f99e66..6e49860 100644
--- a/modules/Blockchain/Ethereum/migrations/1_initial_migration.js
+++ b/modules/Blockchain/Ethereum/migrations/1_initial_migration.js
@@ -1,6 +1,5 @@
 const Migrations = artifacts.require('Migrations'); // eslint-disable-line no-undef
 
-
 module.exports = (deployer) => {
     deployer.deploy(Migrations);
 };
diff --git a/modules/Blockchain/Ethereum/migrations/2_escrow_migration.js b/modules/Blockchain/Ethereum/migrations/2_escrow_migration.js
deleted file mode 100644
index 0cb7ca0..0000000
--- a/modules/Blockchain/Ethereum/migrations/2_escrow_migration.js
+++ /dev/null
@@ -1,14 +0,0 @@
-var EscrowHolder = artifacts.require('./EscrowHolder.sol'); // eslint-disable-line no-undef
-var TestingUtilities = artifacts.require('./TestingUtilities.sol'); // eslint-disable-line no-undef
-var TracToken = artifacts.require('./TracToken.sol'); // eslint-disable-line no-undef
-
-module.exports = async function (deployer, network, accounts) {
-    deployer.deploy(TestingUtilities);
-    await deployer.deploy(TracToken, accounts[0], accounts[0], accounts[0]);
-
-    const trac = await TracToken.deployed().then(async (result) => {
-        console.log(`\t Trace address : ${result.address}`);
-        await deployer.deploy(EscrowHolder, result.address);
-    });
-    await EscrowHolder.deployed();
-};
diff --git a/modules/Blockchain/Ethereum/migrations/2_total_migration.js b/modules/Blockchain/Ethereum/migrations/2_total_migration.js
new file mode 100644
index 0000000..441a1e1
--- /dev/null
+++ b/modules/Blockchain/Ethereum/migrations/2_total_migration.js
@@ -0,0 +1,108 @@
+var EscrowHolder = artifacts.require('EscrowHolder'); // eslint-disable-line no-undef
+var TestingUtilities = artifacts.require('TestingUtilities'); // eslint-disable-line no-undef
+var TracToken = artifacts.require('TracToken'); // eslint-disable-line no-undef
+var OTFingerprintStore = artifacts.require('OTFingerprintStore'); // eslint-disable-line no-undef
+var Bidding = artifacts.require('Bidding'); // eslint-disable-line no-undef
+
+
+const giveMeTracToken = function giveMeTracToken() {
+    const token = TracToken.deployed();
+    return token;
+};
+
+const giveMeEscrowHolder = function giveMeEscrowHolder() {
+    const escrow = EscrowHolder.deployed();
+    return escrow;
+};
+
+const giveMeBidding = function giveMeBidding() {
+    const bidding = Bidding.deployed();
+    return bidding;
+};
+
+const giveMeFingerprint = function giveMeFingerprint() {
+    const fingerprint = OTFingerprintStore.deployed();
+    return fingerprint;
+};
+var token;
+var escrow;
+var bidding;
+var fingerprint;
+
+var DC_wallet;
+var DH_wallet;
+
+const amountToMint = 25e25;
+
+module.exports = (deployer, network, accounts) => {
+    switch (network) {
+    case 'ganache':
+        DC_wallet = accounts[0]; // eslint-disable-line prefer-destructuring
+        DH_wallet = accounts[1]; // eslint-disable-line prefer-destructuring
+        deployer.deploy(TestingUtilities);
+        deployer.deploy(TracToken, accounts[0], accounts[1], accounts[2])
+            .then(() => giveMeTracToken())
+            .then((result) => {
+                token = result;
+                deployer.deploy(EscrowHolder, result.address)
+                    .then(() => giveMeEscrowHolder())
+                    .then((result) => {
+                        escrow = result;
+                        deployer.deploy(Bidding, token.address, result.address)
+                            .then(() => giveMeBidding())
+                            .then((result) => {
+                                bidding = result;
+                                deployer.deploy(OTFingerprintStore)
+                                    .then(() => giveMeFingerprint())
+                                    .then((result) => {
+                                        fingerprint = result;
+                                        escrow.transferOwnership(bidding.address)
+                                            .then(() => {
+                                                token.mint(DC_wallet, amountToMint, { from: accounts[0] }) // eslint-disable-line max-len
+                                                    .then(() => {
+                                                        token.mint(DH_wallet, amountToMint, { from: accounts[0] }) // eslint-disable-line max-len
+                                                            .then(() => {
+                                                                token.finishMinting({ from: accounts[0] }) // eslint-disable-line max-len
+                                                                    .then(() => {
+                                                                        console.log('\n\n \t Contract adressess on ganache:');
+                                                                        console.log('\t OT-fingerprint address: \t' + fingerprint.address); // eslint-disable-line
+                                                                        console.log('\t Token contract address: \t' + token.address); // eslint-disable-line
+                                                                        console.log('\t Escrow contract address: \t' + escrow.address); // eslint-disable-line
+                                                                        console.log('\t Bidding contract address: \t' + bidding.address); // eslint-disable-line
+                                                                    });
+                                                            });
+                                                    });
+                                            });
+                                    });
+                            });
+                    });
+            });
+        break;
+    // eslint-disable-next-line
+    case 'rinkeby':
+        const tokenAddress = '0x98d9a611ad1b5761bdc1daac42c48e4d54cf5882';
+        const fingerprintAddress = '0x8126e8a02bcae11a631d4413b9bd4f01f14e045d';
+        deployer.deploy(EscrowHolder, tokenAddress)
+            .then(() => giveMeEscrowHolder())
+            .then((result) => {
+                escrow = result;
+                deployer.deploy(Bidding, tokenAddress, result.address)
+                    .then(() => giveMeBidding())
+                    .then((result) => {
+                        bidding = result;
+                        escrow.transferOwnership(bidding.address)
+                            .then(() => {
+                                console.log('\n\n \t Contract adressess on rinkeby:');
+                                console.log('\t OT-fingerprint address: \t' + fingerprintAddress + ' (not changed)'); // eslint-disable-line prefer-template
+                                console.log('\t Token contract address: \t' + tokenAddress + ' (not changed)'); // eslint-disable-line prefer-template
+                                console.log('\t Escrow contract address: \t' + escrow.address); // eslint-disable-line prefer-template
+                                console.log('\t Bidding contract address: \t' + bidding.address); // eslint-disable-line prefer-template
+                            });
+                    });
+            });
+        break;
+    default:
+        console.log('Please use either rinkeby or ganache');
+        break;
+    }
+};
diff --git a/modules/Blockchain/Ethereum/test/escrow.test.js b/modules/Blockchain/Ethereum/test/escrow.test.js
index dc33ad0..62210cf 100644
--- a/modules/Blockchain/Ethereum/test/escrow.test.js
+++ b/modules/Blockchain/Ethereum/test/escrow.test.js
@@ -39,7 +39,7 @@ contract('Escrow testing', async (accounts) => {
         console.log(`\t Escrow address: ${escrow_address}`);
     });
 
-    DC_wallet = accounts[1]; // eslint-disable-line prefer-destructuring
+    DC_wallet = accounts[0]; // eslint-disable-line prefer-destructuring
     DH_wallet = accounts[2]; // eslint-disable-line prefer-destructuring
 
     // eslint-disable-next-line no-undef
@@ -51,10 +51,10 @@ contract('Escrow testing', async (accounts) => {
 
         await trace.endMinting({ from: accounts[0] });
 
-        let response = await trace.balanceOf.call(accounts[1]);
+        let response = await trace.balanceOf.call(DC_wallet);
         const balance_DC = response.toNumber();
         console.log(`\t balance_DC: ${balance_DC}`);
-        response = await trace.balanceOf.call(accounts[2]);
+        response = await trace.balanceOf.call(DH_wallet);
         const balance_DH = response.toNumber();
         console.log(`\t balance_DH: ${balance_DH}`);
 
@@ -89,7 +89,12 @@ contract('Escrow testing', async (accounts) => {
         let response = await util.getBlockNumber.call();
 
         await instance.initiateEscrow(
-            DH_wallet, data_id, 100000000, escrowDuration,
+            DC_wallet,
+            DH_wallet,
+            data_id,
+            100000000,
+            100000000,
+            escrowDuration,
             { from: DC_wallet },
         ).then((result) => {
             console.log(`\t Initiate escrow - Gas used : ${result.receipt.gasUsed}`);
@@ -104,16 +109,19 @@ contract('Escrow testing', async (accounts) => {
         let tokens_sent = response[1];
         tokens_sent = tokens_sent.toNumber();
 
-        let actual_startTime = response[2];
+        let stake_amount = response[2];
+        stake_amount = stake_amount.toNumber();
+
+        let actual_startTime = response[3];
         actual_startTime = actual_startTime.toNumber();
 
-        let endTime = response[3];
+        let endTime = response[4];
         endTime = endTime.toNumber();
 
-        let total_time = response[4];
+        let total_time = response[5];
         total_time = total_time.toNumber();
 
-        let status = response[5];
+        let status = response[6];
         status = status.toNumber();
         switch (status) {
         case 0:
@@ -136,6 +144,7 @@ contract('Escrow testing', async (accounts) => {
         console.log('Escrow values: ');
         console.log(`\t token_amount: ${token_amount}`);
         console.log(`\t tokens_sent: ${tokens_sent}`);
+        console.log(`\t stake_amount: ${stake_amount}`);
         console.log(`\t start_time: ${actual_startTime}`);
         console.log(`\t end_time: ${endTime}`);
         console.log(`\t total_time: ${total_time}`);
@@ -145,7 +154,7 @@ contract('Escrow testing', async (accounts) => {
         assert.equal(token_amount, 100000000, 'Amount of tokens does not match!');
         assert.equal(tokens_sent, 0, 'Sent tokens not equal zero!');
         // eslint-disable-next-line no-undef
-        assert.equal(stake, 100000000, 'Stake amount does not match!');
+        assert.equal(stake_amount, 100000000, 'Stake amount does not match!');
         assert.equal(0, actual_startTime, 'Start time not equal zero!');
         assert.equal(0, endTime, 'End time not equal zero!');
         assert.equal(escrowDuration, total_time, 'Escrow duration does not match!');
@@ -158,8 +167,12 @@ contract('Escrow testing', async (accounts) => {
 
         let error;
         try {
-            await instance.verify(
-                DC_wallet, data_id, 3 * 100000000, escrowDuration,
+            await instance.verifyEscrow(
+                DC_wallet,
+                data_id,
+                3 * 100000000,
+                100000000,
+                escrowDuration,
                 { from: DH_wallet },
             ).then((result) => {
                 console.log(`\t Verify escrow - Gas used : ${result.receipt.gasUsed}`);
@@ -169,22 +182,36 @@ contract('Escrow testing', async (accounts) => {
         }
 
         assert.notEqual(error, undefined, 'Error must be thrown');
-        assert.isAbove(error.message.search('invalid opcode'), -1, 'invalid opcode error must be returned');
+        assert.isAbove(error.message.search('Exception while processing transaction: revert'), -1, 'revert error must be returned');
+    });
+
+    // eslint-disable-next-line no-undef
+    it('Should increase DH-escrow approval before verification', async () => {
+        const escrowInstance = await EscrowHolder.deployed();
+        const tokenInstance = await TracToken.deployed();
+
+        await tokenInstance.increaseApproval(escrow_address, 100000000, { from: DH_wallet });
+
+        const response = await tokenInstance.allowance.call(DH_wallet, escrowInstance.address);
+        const allowance_DH = response.toNumber();
+        console.log(`\t allowance_DH: ${allowance_DH}`);
+
+        assert.equal(allowance_DH, 100000000, 'The proper amount was not allowed');
     });
 
     // eslint-disable-next-line no-undef
     it('Should verify an existing escrow', async () => {
         const instance = await EscrowHolder.deployed();
 
-        await instance.verify(
-            DC_wallet, data_id, 100000000, escrowDuration,
+        await instance.verifyEscrow(
+            DC_wallet, data_id, 100000000, 100000000, escrowDuration,
             { from: DH_wallet },
         ).then((result) => {
             console.log(`\t Verify escrow - Gas used : ${result.receipt.gasUsed}`);
         });
 
         const response = await instance.escrow.call(DC_wallet, DH_wallet, data_id);
-        let status = response[5];
+        let status = response[6];
         status = status.toNumber();
         switch (status) {
         case 0:
diff --git a/modules/Blockchain/Ethereum/truffle.js b/modules/Blockchain/Ethereum/truffle.js
index 94d5abc..0ec5c6f 100644
--- a/modules/Blockchain/Ethereum/truffle.js
+++ b/modules/Blockchain/Ethereum/truffle.js
@@ -1,3 +1,7 @@
+var HDWalletProvider = require('truffle-hdwallet-provider'); // eslint-disable-line import/no-unresolved
+
+var mnemonic = '<INSERT MNEOMONIC OF YOUR METAMASK HERE>';
+
 module.exports = {
     networks: {
         development: {
@@ -6,5 +10,18 @@ module.exports = {
             gas: 4000000,
             network_id: '*', // Match any network id
         },
+
+        ganache: {
+            host: 'localhost',
+            port: 7545,
+            gas: 4000000,
+            network_id: '5777',
+        },
+
+        rinkeby: {
+            provider: () => new HDWalletProvider(mnemonic, 'https://rinkeby.infura.io/<INSERT INFURA ACCESS KEY HERE>'),
+            network_id: 3,
+            gas: 4000000,
+        },
     },
 };
diff --git a/package.json b/package.json
index bf0e052..3c101e0 100644
--- a/package.json
+++ b/package.json
@@ -10,18 +10,18 @@
     "lint": "./node_modules/.bin/eslint --quiet migrations/ models/ modules/ seeders/ test/ ot-node.js .eslintrc.js isStartHealthy.js"
   },
   "devDependencies": {
-    "babel-eslint": "^8.2.2",
+    "babel-eslint": "^8.2.3",
     "chai": "^4.1.2",
-    "eslint": "^4.18.2",
+    "eslint": "^4.19.1",
     "eslint-config-airbnb": "^16.1.0",
-    "eslint-plugin-import": "^2.9.0",
+    "eslint-plugin-import": "^2.11.0",
     "eslint-plugin-jsx-a11y": "^6.0.3",
     "eslint-plugin-react": "^7.7.0",
     "mocha": "^5.0.1",
     "nyc": "^11.6.0",
     "should": "^13.2.1",
-    "supertest": "^3.0.0",
-    "sinon": "^4.5.0"
+    "sinon": "^4.5.0",
+    "supertest": "^3.0.0"
   },
   "repository": {
     "type": "git",
-- 
2.13.5 (Apple Git-94)

