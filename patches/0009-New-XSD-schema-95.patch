From e4a349dc9a3b1bb8527347dc5faa4f268be39e25 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Neboj=C5=A1a=20Obradovi=C4=87?= <nebojsa@gobandit.com>
Date: Fri, 4 May 2018 16:49:53 +0200
Subject: [PATCH 09/22] New XSD schema (#95)

* New Importer and XSD Schema
---
 importers/BasicTypes.xsd                     |  23 +
 importers/BusinessScope.xsd                  |  56 +++
 importers/DocumentIdentification.xsd         |  14 +
 importers/EPCglobal-epcis-masterdata-1_2.xsd |   6 +-
 importers/EPCglobal.xsd                      |  40 ++
 importers/Manifest.xsd                       |  22 +
 importers/Partner.xsd                        |  26 ++
 importers/StandardBusinessDocumentHeader.xsd |  25 +
 importers/example_gs1.xml                    |   2 +-
 modules/gs1-importer.js                      | 657 ++++++++++++++++++++-------
 package.json                                 |   4 +-
 11 files changed, 708 insertions(+), 167 deletions(-)
 create mode 100644 importers/BasicTypes.xsd
 create mode 100644 importers/BusinessScope.xsd
 create mode 100644 importers/DocumentIdentification.xsd
 create mode 100644 importers/EPCglobal.xsd
 create mode 100644 importers/Manifest.xsd
 create mode 100644 importers/Partner.xsd
 create mode 100644 importers/StandardBusinessDocumentHeader.xsd

diff --git a/importers/BasicTypes.xsd b/importers/BasicTypes.xsd
new file mode 100644
index 0000000..7c4ecd4
--- /dev/null
+++ b/importers/BasicTypes.xsd
@@ -0,0 +1,23 @@
+<?xml version="1.0"?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+     targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader"
+     xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader"
+     elementFormDefault="qualified" attributeFormDefault="unqualified">
+
+  <xs:simpleType name="MimeTypeQualifier">
+    <xs:annotation>
+      <xs:documentation>The MIME type as defined by IANA. Please refer to
+            http://www.iana.org/assignments/media-types/ for a list of types.
+      </xs:documentation>
+    </xs:annotation>
+    <xs:restriction base="xs:string"/>
+  </xs:simpleType>
+
+  <xs:simpleType name="Language">
+    <xs:annotation>
+      <xs:documentation>ISO 639-2; 1998 representation of Language name. Refer to http://www.loc.gov/standards/iso639-2/iso639jac.html to get the latest version of the standard.
+      </xs:documentation>
+    </xs:annotation>
+    <xs:restriction base="xs:string"/>
+  </xs:simpleType>
+</xs:schema>
diff --git a/importers/BusinessScope.xsd b/importers/BusinessScope.xsd
new file mode 100644
index 0000000..35a3f7f
--- /dev/null
+++ b/importers/BusinessScope.xsd
@@ -0,0 +1,56 @@
+<?xml version="1.0"?>
+<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by Ted Osinski (Uniform Code Council) -->
+<xs:schema targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified">
+	<xs:complexType name="BusinessScope">
+		<xs:sequence>
+			<xs:element name="Scope" type="Scope" minOccurs="0" maxOccurs="unbounded"/>
+		</xs:sequence>
+	</xs:complexType>
+	<xs:complexType name="Scope">
+		<xs:sequence>
+			<xs:group ref="ScopeAttributes"/>
+			<xs:element ref="ScopeInformation" minOccurs="0" maxOccurs="unbounded"/>
+		</xs:sequence>
+	</xs:complexType>
+	<xs:group name="ScopeAttributes">
+		<xs:sequence>
+			<xs:element name="Type" type="xs:string"/>
+			<xs:element name="InstanceIdentifier" type="xs:string"/>
+			<xs:element name="Identifier" type="xs:string" minOccurs="0"/>
+		</xs:sequence>
+	</xs:group>
+	<xs:element name="ScopeInformation" type="xs:anyType" abstract="true"/>
+	<xs:element name="CorrelationInformation" type="CorrelationInformation" substitutionGroup="ScopeInformation"/>
+	<xs:complexType name="CorrelationInformation">
+		<xs:sequence>
+			<xs:element name="RequestingDocumentCreationDateTime" type="xs:dateTime" minOccurs="0"/>
+			<xs:element name="RequestingDocumentInstanceIdentifier" type="xs:string" minOccurs="0"/>
+			<xs:element name="ExpectedResponseDateTime" type="xs:dateTime" minOccurs="0"/>
+		</xs:sequence>
+	</xs:complexType>
+	<xs:element name="BusinessService" type="BusinessService" substitutionGroup="ScopeInformation"/>
+	<xs:complexType name="BusinessService">
+		<xs:sequence>
+			<xs:element name="BusinessServiceName" type="xs:string" minOccurs="0"/>
+			<xs:element name="ServiceTransaction" type="ServiceTransaction" minOccurs="0"/>
+		</xs:sequence>
+	</xs:complexType>
+	<xs:complexType name="ServiceTransaction">
+		<xs:attribute name="TypeOfServiceTransaction" type="TypeOfServiceTransaction" use="optional"/>
+		<xs:attribute name="IsNonRepudiationRequired" type="xs:string"/>
+		<xs:attribute name="IsAuthenticationRequired" type="xs:string"/>
+		<xs:attribute name="IsNonRepudiationOfReceiptRequired" type="xs:string"/>
+		<xs:attribute name="IsIntelligibleCheckRequired" type="xs:string"/>
+		<xs:attribute name="IsApplicationErrorResponseRequested" type="xs:string"/>
+		<xs:attribute name="TimeToAcknowledgeReceipt" type="xs:string"/>
+		<xs:attribute name="TimeToAcknowledgeAcceptance" type="xs:string"/>
+		<xs:attribute name="TimeToPerform" type="xs:string"/>
+		<xs:attribute name="Recurrence" type="xs:string"/>
+	</xs:complexType>
+	<xs:simpleType name="TypeOfServiceTransaction">
+		<xs:restriction base="xs:string">
+			<xs:enumeration value="RequestingServiceTransaction"/>
+			<xs:enumeration value="RespondingServiceTransaction"/>
+		</xs:restriction>
+	</xs:simpleType>
+</xs:schema>
diff --git a/importers/DocumentIdentification.xsd b/importers/DocumentIdentification.xsd
new file mode 100644
index 0000000..2e59030
--- /dev/null
+++ b/importers/DocumentIdentification.xsd
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified">
+
+  <xs:complexType name="DocumentIdentification">
+    <xs:sequence>
+      <xs:element name="Standard" type="xs:string"/>
+      <xs:element name="TypeVersion" type="xs:string"/>
+      <xs:element name="InstanceIdentifier" type="xs:string"/>
+      <xs:element name="Type" type="xs:string"/>
+      <xs:element name="MultipleType" type="xs:boolean" minOccurs="0"/>
+      <xs:element name="CreationDateAndTime" type="xs:dateTime"/>
+    </xs:sequence>
+  </xs:complexType>
+</xs:schema>
\ No newline at end of file
diff --git a/importers/EPCglobal-epcis-masterdata-1_2.xsd b/importers/EPCglobal-epcis-masterdata-1_2.xsd
index 2061246..de98315 100644
--- a/importers/EPCglobal-epcis-masterdata-1_2.xsd
+++ b/importers/EPCglobal-epcis-masterdata-1_2.xsd
@@ -11,8 +11,8 @@ GS1 retains the right to make changes to this document at any time, without noti
       <epcglobal:specification>EPC INFORMATION SERVICE (EPCIS) Version 1.2</epcglobal:specification>
     </xsd:documentation>
   </xsd:annotation>
-  <xsd:import namespace="urn:epcglobal:xsd:1" schemaLocation="./EPCglobal.xsd"/>
-  <xsd:import namespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" schemaLocation="./StandardBusinessDocumentHeader.xsd"/>
+  <xsd:import namespace="urn:epcglobal:xsd:1" schemaLocation="./importers/EPCglobal.xsd"/>
+  <xsd:import namespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" schemaLocation="./importers/StandardBusinessDocumentHeader.xsd"/>
   <!-- EPCIS CORE ELEMENTS -->
   <xsd:element name="EPCISDocument" type="epcis:EPCISDocumentType"/>
   <xsd:complexType name="EPCISDocumentType">
@@ -175,7 +175,7 @@ GS1 retains the right to make changes to this document at any time, without noti
       <xsd:element name="QuantityEvent" type="epcis:QuantityEventType" minOccurs="0" maxOccurs="unbounded"/>
       <xsd:element name="TransactionEvent" type="epcis:TransactionEventType" minOccurs="0" maxOccurs="unbounded"/>
       <xsd:element name="extension" type="epcis:EPCISEventListExtensionType"/>
-      <xsd:any namespace="##other" processContents="lax"/>
+      <!--<xsd:any namespace="##other" processContents="lax"/>-->
     </xsd:choice>
     <!-- Note: the use of "unbounded" in both the xsd:choice element
                     and the enclosed xsd:element elements is, strictly speaking,
diff --git a/importers/EPCglobal.xsd b/importers/EPCglobal.xsd
new file mode 100644
index 0000000..909ad73
--- /dev/null
+++ b/importers/EPCglobal.xsd
@@ -0,0 +1,40 @@
+<xsd:schema xmlns:epcglobal="urn:epcglobal:xsd:1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:epcglobal:xsd:1" elementFormDefault="unqualified" attributeFormDefault="unqualified" version="1.0">
+	<xsd:annotation>
+		<xsd:documentation>
+			<epcglobal:copyright>Copyright (C) 2004 Epcglobal Inc., All Rights Reserved.</epcglobal:copyright>
+			<epcglobal:disclaimer>EPCglobal Inc., its members, officers, directors, employees, or agents shall not be liable for any injury, loss, damages, financial or otherwise, arising from, related to, or caused by the use of this document.  The use of said document shall constitute your express consent to the foregoing exculpation.</epcglobal:disclaimer>
+			<epcglobal:specification>EPCglobal common components Version 1.0</epcglobal:specification>
+		</xsd:documentation>
+	</xsd:annotation>
+	<xsd:complexType name="Document" abstract="true">
+		<xsd:annotation>
+			<xsd:documentation xml:lang="en">
+         EPCglobal document properties for all messages.
+      </xsd:documentation>
+		</xsd:annotation>
+		<xsd:attribute name="schemaVersion" type="xsd:decimal" use="required">
+			<xsd:annotation>
+				<xsd:documentation xml:lang="en">
+           The version of the schema corresponding to which the instance conforms. 
+        </xsd:documentation>
+			</xsd:annotation>
+		</xsd:attribute>
+		<xsd:attribute name="creationDate" type="xsd:dateTime" use="required">
+			<xsd:annotation>
+				<xsd:documentation xml:lang="en">
+           The date the message was created. Used for auditing and logging.
+        </xsd:documentation>
+			</xsd:annotation>
+		</xsd:attribute>
+	</xsd:complexType>
+	<xsd:complexType name="EPC">
+		<xsd:annotation>
+			<xsd:documentation xml:lang="en">
+         EPC represents the Electronic Product Code.
+      </xsd:documentation>
+		</xsd:annotation>
+		<xsd:simpleContent>
+			<xsd:extension base="xsd:string"/>
+		</xsd:simpleContent>
+	</xsd:complexType>
+</xsd:schema>
diff --git a/importers/Manifest.xsd b/importers/Manifest.xsd
new file mode 100644
index 0000000..e22cd76
--- /dev/null
+++ b/importers/Manifest.xsd
@@ -0,0 +1,22 @@
+<?xml version="1.0"?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+     targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader"
+     xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader"
+     elementFormDefault="qualified" attributeFormDefault="unqualified">
+  <xs:include schemaLocation="BasicTypes.xsd"/>
+
+  <xs:complexType name="Manifest">
+    <xs:sequence>
+      <xs:element name="NumberOfItems" type="xs:integer"/>
+      <xs:element name="ManifestItem" type="ManifestItem" maxOccurs="unbounded"/>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="ManifestItem">
+    <xs:sequence>
+      <xs:element name="MimeTypeQualifierCode" type="MimeTypeQualifier"/>
+      <xs:element name="UniformResourceIdentifier" type="xs:anyURI"/>
+      <xs:element name="Description" type="xs:string" minOccurs="0"/>
+      <xs:element name="LanguageCode" type="Language" minOccurs="0"/>
+    </xs:sequence>
+  </xs:complexType>
+</xs:schema>
diff --git a/importers/Partner.xsd b/importers/Partner.xsd
new file mode 100644
index 0000000..b0865cd
--- /dev/null
+++ b/importers/Partner.xsd
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified">
+
+  <xs:complexType name="Partner">
+    <xs:sequence>
+      <xs:element name="Identifier" type="PartnerIdentification"/>
+      <xs:element name="ContactInformation" type="ContactInformation" minOccurs="0" maxOccurs="unbounded"/>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="PartnerIdentification">
+    <xs:simpleContent>
+      <xs:extension base="xs:string">
+        <xs:attribute name="Authority" type="xs:string"/>
+      </xs:extension>
+    </xs:simpleContent>
+  </xs:complexType>
+  <xs:complexType name="ContactInformation">
+    <xs:sequence>
+      <xs:element name="Contact" type="xs:string"/>
+      <xs:element name="EmailAddress" type="xs:string" minOccurs="0"/>
+      <xs:element name="FaxNumber" type="xs:string" minOccurs="0"/>
+      <xs:element name="TelephoneNumber" type="xs:string" minOccurs="0"/>
+      <xs:element name="ContactTypeIdentifier" type="xs:string" minOccurs="0"/>
+    </xs:sequence>
+  </xs:complexType>
+</xs:schema>
\ No newline at end of file
diff --git a/importers/StandardBusinessDocumentHeader.xsd b/importers/StandardBusinessDocumentHeader.xsd
new file mode 100644
index 0000000..86bf367
--- /dev/null
+++ b/importers/StandardBusinessDocumentHeader.xsd
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified">
+  <xs:include schemaLocation="DocumentIdentification.xsd"/>
+  <xs:include schemaLocation="Partner.xsd"/>
+  <xs:include schemaLocation="Manifest.xsd"/>
+  <xs:include schemaLocation="BusinessScope.xsd"/>
+  <xs:complexType name="StandardBusinessDocumentHeader">
+    <xs:sequence>
+      <xs:element name="HeaderVersion" type="xs:string"/>
+      <xs:element name="Sender" type="Partner" maxOccurs="unbounded"/>
+      <xs:element name="Receiver" type="Partner" maxOccurs="unbounded"/>
+      <xs:element name="DocumentIdentification" type="DocumentIdentification"/>
+      <xs:element name="Manifest" type="Manifest" minOccurs="0"/>
+      <xs:element name="BusinessScope" type="BusinessScope" minOccurs="0"/>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:element name="StandardBusinessDocumentHeader" type="StandardBusinessDocumentHeader"/>
+  <xs:element name="StandardBusinessDocument" type="StandardBusinessDocument"/>
+  <xs:complexType name="StandardBusinessDocument">
+    <xs:sequence>
+      <xs:element ref="StandardBusinessDocumentHeader" minOccurs="0"/>
+      <xs:any namespace="##other" processContents="lax"/>
+    </xs:sequence>
+  </xs:complexType>
+</xs:schema>
\ No newline at end of file
diff --git a/importers/example_gs1.xml b/importers/example_gs1.xml
index 64f994a..670e51a 100644
--- a/importers/example_gs1.xml
+++ b/importers/example_gs1.xml
@@ -90,7 +90,7 @@
 								<attribute id="urn:ot:mda:object:name">Winter sallad mix</attribute>
 							    <attribute id="urn:ot:mda:object:type">Sallad</attribute>
 								<attribute id="urn:ot:mda:object:category">Fresh salad</attribute>
-								<attribute id="urn:ot:mda:object:ean13">8438454123998</attribute>																	
+								<attribute id="urn:ot:mda:object:ean13">501234567890</attribute>
 							</OTVocabularyElement>
 						</extension>
 					</Vocabulary>					
diff --git a/modules/gs1-importer.js b/modules/gs1-importer.js
index 8c4698d..7936b54 100644
--- a/modules/gs1-importer.js
+++ b/modules/gs1-importer.js
@@ -2,10 +2,12 @@ const { parseString } = require('xml2js');
 const fs = require('fs');
 const md5 = require('md5');
 const deasync = require('deasync-promise');
+const xsd = require('libxml-xsd');
 
 const GSInstance = require('./GraphStorageInstance');
 const utilities = require('./Utilities');
 const async = require('async');
+const validator = require('validator');
 
 // Update import data
 
@@ -65,21 +67,181 @@ function sanitize(old_obj, new_obj, patterns) {
 
 function Error(message) {
     console.log(`Error: ${message}`);
+    return message;
+}
+
+// validate
+function providerIdValidation(provider_id, validation_object) {
+    const data = provider_id;
+    const object = validation_object;
+    if (data.length === 12) {
+        return true;
+    }
+    return false;
+}
+
+function emailValidation(email) {
+    const result = validator.isEmail(email);
+
+    if (result) {
+        return true;
+    }
+    return false;
+}
+
+function dateTimeValidation(date) {
+    const result = validator.isISO8601(date);
+
+    if (result) {
+        return true;
+    }
+    return false;
+}
+
+function countryValidation(country) {
+    const postal_code = country;
+
+    if (postal_code.length > 2) {
+        return false;
+    }
+    return true;
+}
+
+function postalCodeValidation(code) {
+    const result = validator.isNumeric(code);
+
+    if (result) {
+        return true;
+    }
+    return false;
+}
+
+function longLatValidation(data) {
+    const result = validator.isLatLong(data);
+    if (result) {
+        return true;
+    }
     return false;
 }
 
+function ean13Validation(eanCode) {
+    // Check if only digits
+    const ValidChars = '0123456789';
+    for (let i = 0; i < eanCode.length; i += 1) {
+        const digit = eanCode.charAt(i);
+        if (ValidChars.indexOf(digit) === -1) {
+            return false;
+        }
+    }
+
+    // Add five 0 if the code has only 8 digits or 12
+    if (eanCode.length === 8) {
+        eanCode = `00000${eanCode}`;
+    } else if (eanCode.length === 12) {
+        eanCode = `0${eanCode}`;
+    }
+
+    // Check for 13 digits otherwise
+    if (eanCode.length !== 13) {
+        return false;
+    }
+
+    // Get the check number
+    const originalCheck = parseInt(eanCode.substring(eanCode.length - 1), 10);
+    eanCode = eanCode.substring(0, eanCode.length - 1);
+
+    // Add even numbers together
+    let even = Number(eanCode.charAt(1)) +
+        Number(eanCode.charAt(3)) +
+        Number(eanCode.charAt(5)) +
+        Number(eanCode.charAt(7)) +
+        Number(eanCode.charAt(9)) +
+        Number(eanCode.charAt(11));
+    // Multiply this result by 3
+    even *= 3;
+
+    // Add odd numbers together
+    const odd = Number(eanCode.charAt(0)) +
+        Number(eanCode.charAt(2)) +
+        Number(eanCode.charAt(4)) +
+        Number(eanCode.charAt(6)) +
+        Number(eanCode.charAt(8)) +
+        Number(eanCode.charAt(10));
+
+    // Add two totals together
+    const total = even + odd;
+
+    // Calculate the checksum
+    // Divide total by 10 and store the remainder
+    let checksum = total % 10;
+    // If result is not 0 then take away 10
+    if (checksum !== 0) {
+        checksum = 10 - checksum;
+    }
+
+    // Return the result
+    if (checksum !== originalCheck) {
+        return false;
+    }
+
+    return true;
+}
+
+function numberValidation(num) {
+    const number = validator.isDecimal(num, { locale: 'en-AU' });
+
+    if (number) {
+        return true;
+    }
+    return false;
+}
+
+function ethWalletValidation(wallet) {
+    const eth_wallet = wallet;
+
+    const first_char = eth_wallet.charAt(0);
+    const second_char = eth_wallet.charAt(1);
+    const rest = eth_wallet.substr(2);
+    const rest_hex = validator.isHexadecimal(rest);
+
+    var valid = false;
+
+    if (rest_hex && rest.length === 40) {
+        valid = true;
+    }
+
+    if (first_char === '0' && second_char === 'x' && valid) {
+        return true;
+    }
+    return false;
+}
+
+
 module.exports = () => ({
     parseGS1(gs1_xml_file, callback) {
         const { db } = GSInstance;
         var gs1_xml = fs.readFileSync(gs1_xml_file);
+
+        xsd.parseFile('./importers/EPCglobal-epcis-masterdata-1_2.xsd', (err, schema) => {
+            if (err) {
+                throw Error('Invalid XML structure!');
+            }
+
+            schema.validate(gs1_xml.toString(), (err, validationErrors) => {
+                if (err) {
+                    throw Error('Invalid XML structure!');
+                }
+            });
+        });
+
         parseString(
             gs1_xml,
             { explicitArray: false, mergeAttrs: true },
             /* eslint-disable consistent-return */
             async (err, result) => {
                 /**
-                 * Variables
-                 */
+                     * Variables
+                     */
 
                 var sanitized_EPCIS_document;
 
@@ -126,55 +288,107 @@ module.exports = () => ({
                 // READING EPCIS Document
                 const doc = findValuesHelper(result, 'epcis:EPCISDocument', []);
                 if (doc.length <= 0) {
-                    return Error('Missing EPCISDocument element!');
+                    throw Error('Missing EPCISDocument element!');
                 }
 
+
                 const EPCISDocument_element = result['epcis:EPCISDocument'];
 
+
+                const creation_date_head_check = findValuesHelper(EPCISDocument_element, 'creationDate', []);
+                if (creation_date_head_check.length > 0) {
+                    var temp_creation_date_head = EPCISDocument_element.creationDate;
+                }
+                const creation_date_head = temp_creation_date_head;
+
+                var creation_date_head_validation = dateTimeValidation(creation_date_head);
+                if (!creation_date_head_validation) {
+                    throw Error('Invalid Date and Time format. Please use format defined by ISO 8601 standard!');
+                }
+
                 const new_obj = {};
                 sanitized_EPCIS_document = sanitize(EPCISDocument_element, new_obj, ['sbdh:', 'xmlns:']);
 
 
                 const head = findValuesHelper(sanitized_EPCIS_document, 'EPCISHeader', []);
                 if (head.length <= 0) {
-                    return Error('Missing EPCISHeader element for EPCISDocument element!');
+                    throw Error('Missing EPCISHeader element for EPCISDocument element!');
                 }
                 const EPCISHeader_element = sanitized_EPCIS_document.EPCISHeader;
 
 
                 const standard_doc_header = findValuesHelper(EPCISHeader_element, 'StandardBusinessDocumentHeader', []);
                 if (standard_doc_header.length <= 0) {
-                    return Error('Missing StandardBusinessDocumentHeader element for EPCISHeader element!');
+                    throw Error('Missing StandardBusinessDocumentHeader element for EPCISHeader element!');
                 }
                 const StandardBusinessDocumentHeader_element =
-                    EPCISHeader_element.StandardBusinessDocumentHeader;
+                        EPCISHeader_element.StandardBusinessDocumentHeader;
+
+
+                const document_id_check = findValuesHelper(StandardBusinessDocumentHeader_element, 'DocumentIdentification', []);
+                if (document_id_check.length > 0) {
+                    var tempDocument_identification_element =
+                            StandardBusinessDocumentHeader_element.DocumentIdentification;
+                }
+                const Document_identification_element = tempDocument_identification_element;
+
+                const creation_date_check = findValuesHelper(Document_identification_element, 'CreationDateAndTime', []);
+                if (creation_date_check.length > 0) {
+                    var tempCreationDate_element =
+                            Document_identification_element.CreationDateAndTime;
+                }
+                const CreationDate_element = tempCreationDate_element;
+
+
+                const date_validation_result = dateTimeValidation(CreationDate_element);
+
+                if (!date_validation_result) {
+                    throw Error('Invalid Date and Time format. Please use format defined by ISO 8601 standard!');
+                }
 
 
                 // //SENDER
                 const send = findValuesHelper(StandardBusinessDocumentHeader_element, 'Sender', []);
                 if (send.length <= 0) {
-                    return Error('Missing Sender element for StandardBusinessDocumentHeader element!');
+                    throw Error('Missing Sender element for StandardBusinessDocumentHeader element!');
                 }
                 const Sender_element = StandardBusinessDocumentHeader_element.Sender;
 
 
                 const send_id = findValuesHelper(Sender_element, 'Identifier', []);
                 if (send_id.length <= 0) {
-                    return Error('Missing Identifier element for Sender element!');
+                    throw Error('Missing Identifier element for Sender element!');
                 }
                 const sender_id_element = Sender_element.Identifier;
 
+                const contact_info_check = findValuesHelper(Sender_element, 'ContactInformation', []);
+                if (contact_info_check.length > 0) {
+                    var temp_contact_info = Sender_element.ContactInformation;
+                }
+                const contact_info_sender_element = temp_contact_info;
+
+                const email_check = findValuesHelper(contact_info_sender_element, 'EmailAddress', []);
+                if (email_check.length > 0) {
+                    var temp_email_check = contact_info_sender_element.EmailAddress;
+                }
+                const sender_email = temp_email_check;
+
+                const email_validation = emailValidation(sender_email);
+                if (!email_validation) {
+                    throw Error('This email adress is not valid!');
+                }
+
 
                 const sendid = findValuesHelper(sender_id_element, '_', []);
                 if (sendid.length <= 0) {
-                    return Error('Missing _ element for sender_id element!');
+                    throw Error('Missing _ element for sender_id element!');
                 }
                 const sender_id = sender_id_element._;
 
 
                 const contact_info = findValuesHelper(Sender_element, 'ContactInformation', []);
                 if (contact_info.length <= 0) {
-                    return Error('Missing ContactInformation element for Sender element!');
+                    throw Error('Missing ContactInformation element for Sender element!');
                 }
                 const ContactInformation_element = Sender_element.ContactInformation;
 
@@ -182,46 +396,63 @@ module.exports = () => ({
                 // ///RECEIVER
                 const receive = findValuesHelper(StandardBusinessDocumentHeader_element, 'Receiver', []);
                 if (receive.length <= 0) {
-                    return Error('Missing Receiver element for StandardBusinessDocumentHeader element!');
+                    throw Error('Missing Receiver element for StandardBusinessDocumentHeader element!');
                 }
                 const Receiver_element = StandardBusinessDocumentHeader_element.Receiver;
 
 
                 const receive_id = findValuesHelper(Receiver_element, 'Identifier', []);
                 if (receive_id.length <= 0) {
-                    return Error('Missing Identifier element for Receiver element!');
+                    throw Error('Missing Identifier element for Receiver element!');
                 }
                 const receiver_id_element = Receiver_element.Identifier;
 
+                const receiver_contact_info_check = findValuesHelper(Receiver_element, 'ContactInformation', []);
+                if (receiver_contact_info_check.length > 0) {
+                    var temp_contact_info_receiver = Receiver_element.ContactInformation;
+                }
+                const contact_info_receiver_element = temp_contact_info_receiver;
+
+                const email_check_receiver = findValuesHelper(contact_info_receiver_element, 'EmailAddress', []);
+                if (email_check_receiver.length > 0) {
+                    var temp_email_check_receiver = contact_info_receiver_element.EmailAddress;
+                }
+                const receiver_email = temp_email_check_receiver;
+
+                const email_validation_receiver = emailValidation(receiver_email);
+                if (!email_validation_receiver) {
+                    throw Error('This email adress is not valid!');
+                }
+
 
                 const receiveid = findValuesHelper(receiver_id_element, '_', []);
                 if (receiveid.length <= 0) {
-                    return Error('Missing Identifier element for Receiver element!');
+                    throw Error('Missing Identifier element for Receiver element!');
                 }
                 const receiver_id = receiver_id_element._;
 
 
                 const contact_info_rec = findValuesHelper(Receiver_element, 'ContactInformation', []);
                 if (contact_info_rec.length <= 0) {
-                    return Error('Missing ContactInformation element for Receiver element!');
+                    throw Error('Missing ContactInformation element for Receiver element!');
                 }
                 const ContactInformation_element_receiver = Receiver_element.ContactInformation;
 
 
                 const doc_identification = findValuesHelper(StandardBusinessDocumentHeader_element, 'DocumentIdentification', []);
                 if (doc_identification.length <= 0) {
-                    return Error('Missing DocumentIdentification element for StandardBusinessDocumentHeader element!');
+                    throw Error('Missing DocumentIdentification element for StandardBusinessDocumentHeader element!');
                 }
                 const DocumentIdentification_element =
-                    StandardBusinessDocumentHeader_element.DocumentIdentification;
+                        StandardBusinessDocumentHeader_element.DocumentIdentification;
 
 
                 const bus_scope = findValuesHelper(StandardBusinessDocumentHeader_element, 'BusinessScope', []);
                 if (bus_scope.length <= 0) {
-                    return Error('Missing BusinessScope element for StandardBusinessDocumentHeader element!');
+                    throw Error('Missing BusinessScope element for StandardBusinessDocumentHeader element!');
                 }
                 const BusinessScope_element =
-                    StandardBusinessDocumentHeader_element.BusinessScope;
+                        StandardBusinessDocumentHeader_element.BusinessScope;
 
 
                 sender.sender_id = {};
@@ -251,28 +482,28 @@ module.exports = () => ({
 
                 const ext = findValuesHelper(EPCISHeader_element, 'extension', []);
                 if (ext.length <= 0) {
-                    return Error('Missing extension element for EPCISHeader element!');
+                    throw Error('Missing extension element for EPCISHeader element!');
                 }
                 const extension_element = EPCISHeader_element.extension;
 
 
                 const epcis_master = findValuesHelper(extension_element, 'EPCISMasterData', []);
                 if (epcis_master.length <= 0) {
-                    return Error('Missing EPCISMasterData element for extension element!');
+                    throw Error('Missing EPCISMasterData element for extension element!');
                 }
                 const EPCISMasterData_element = extension_element.EPCISMasterData;
 
 
                 const vocabulary_li = findValuesHelper(EPCISMasterData_element, 'VocabularyList', []);
                 if (vocabulary_li.length <= 0) {
-                    return Error('Missing VocabularyList element for EPCISMasterData element!');
+                    throw Error('Missing VocabularyList element for EPCISMasterData element!');
                 }
                 const VocabularyList_element = EPCISMasterData_element.VocabularyList;
 
 
                 const vocabulary = findValuesHelper(VocabularyList_element, 'Vocabulary', []);
                 if (vocabulary.length <= 0) {
-                    return Error('Missing Vocabulary element for VocabularyList element!');
+                    throw Error('Missing Vocabulary element for VocabularyList element!');
                 }
                 Vocabulary_elements = VocabularyList_element.Vocabulary;
 
@@ -302,7 +533,7 @@ module.exports = () => ({
 
                             const typ = findValuesHelper(pro, 'type', []);
                             if (typ.length <= 0) {
-                                return Error('Missing type element for element!');
+                                throw Error('Missing type element for element!');
                             }
                             const v_type = pro.type;
 
@@ -312,18 +543,18 @@ module.exports = () => ({
 
                                 const voc_el_list = findValuesHelper(Bussines_location_elements, 'VocabularyElementList', []);
                                 if (voc_el_list.length === 0) {
-                                    return Error('Missing VocabularyElementList element for element!');
+                                    throw Error('Missing VocabularyElementList element for element!');
                                 }
                                 VocabularyElementList_element =
-                                    Bussines_location_elements.VocabularyElementList;
+                                        Bussines_location_elements.VocabularyElementList;
 
 
                                 for (const k in VocabularyElementList_element) {
                                     data_object = {};
 
                                     const VocabularyElement_element =
-                                        VocabularyElementList_element[k];
-                                    // console.log(VocabularyElement_element)
+                                            VocabularyElementList_element[k];
+                                        // console.log(VocabularyElement_element)
 
                                     for (const x in VocabularyElement_element) {
                                         const v = VocabularyElement_element[x];
@@ -331,7 +562,7 @@ module.exports = () => ({
 
                                         const loc_id = findValuesHelper(v, 'id', []);
                                         if (loc_id.length <= 0) {
-                                            return Error('Missing id element for VocabularyElement element!');
+                                            throw Error('Missing id element for VocabularyElement element!');
                                         }
                                         const str = v.id;
                                         business_location_id = str.replace('urn:epc:id:sgln:', '');
@@ -339,35 +570,53 @@ module.exports = () => ({
 
                                         const attr = findValuesHelper(v, 'attribute', []);
                                         if (attr.length <= 0) {
-                                            return Error('Missing attribute element for VocabularyElement element!');
+                                            throw Error('Missing attribute element for VocabularyElement element!');
                                         }
                                         const { attribute } = v;
 
+
                                         for (const y in attribute) {
                                             const kk = attribute[y];
 
 
                                             const att_id = findValuesHelper(kk, 'id', []);
                                             if (att_id.length <= 0) {
-                                                return Error('Missing id attribute for element!');
+                                                throw Error('Missing id attribute for element!');
+                                            }
+                                            attribute_id = kk.id;
+
+                                            const attribute_value = kk._;
+
+
+                                            if (attribute_id === 'urn:ts:location:country') {
+                                                const country_validation =
+                                                        countryValidation(attribute_value);
+                                                if (!country_validation) {
+                                                    throw Error('Invalid country code. Please use two characters!');
+                                                }
+                                            }
+
+                                            if (attribute_id === 'urn:ts:location:postalCode') {
+                                                const postal_code_validation =
+                                                        postalCodeValidation(attribute_value);
+                                                if (!postal_code_validation) {
+                                                    throw Error('Invalid postal code!');
+                                                }
                                             }
-                                            const str = kk.id;
-                                            attribute_id = str;
 
 
                                             data_object[attribute_id] = kk._;
                                         }
 
-                                        var children_elements;
                                         const children_check = findValuesHelper(v, 'children', []);
                                         if (children_check.length === 0) {
-                                            return Error('Missing children element for element!');
+                                            throw Error('Missing children element for element!');
                                         }
-                                        children_elements = v.children;
+                                        const children_elements = v.children;
 
 
                                         if (findValuesHelper(children_elements, 'id', []).length === 0) {
-                                            return Error('Missing id element in children element for business location!');
+                                            throw Error('Missing id element in children element for business location!');
                                         }
 
                                         const children_id = children_elements.id;
@@ -421,10 +670,9 @@ module.exports = () => ({
 
                                                     const att_id = findValuesHelper(kk, 'id', []);
                                                     if (att_id.length <= 0) {
-                                                        return Error('Missing id attribute for element!');
+                                                        throw Error('Missing id attribute for element!');
                                                     }
-                                                    const str = kk.id;
-                                                    attribute_id = str;
+                                                    attribute_id = kk.id;
 
 
                                                     attribute_id = attribute_id.replace('urn:ot:location:', '');
@@ -456,65 +704,72 @@ module.exports = () => ({
                                         locations[business_location_id]._key = md5(`business_location_${sender_id}_${business_location_id}`);
                                     }
                                 }
-                            }
-
-                            var Participant_elements;
-                            var exten_element;
-                            var OTVocabularyElement_element;
-                            var participant_id;
-                            var attribute_elements;
-                            // /////PARTICIPANT///////////
-                            if (v_type === 'urn:ot:mda:participant') {
-                                Participant_elements = pro;
+                            } else if (v_type === 'urn:ot:mda:participant') {
+                                let participant_id;
+                                // /////PARTICIPANT///////////
+                                const Participant_elements = pro;
 
                                 const extension_check = findValuesHelper(Participant_elements, 'extension', []);
                                 if (extension_check.length === 0) {
-                                    return Error('Missing extension element for Participant element!');
+                                    throw Error('Missing extension element for Participant element!');
                                 }
-                                exten_element = Participant_elements.extension;
+                                const exten_element = Participant_elements.extension;
 
 
                                 const ot_voc_check = findValuesHelper(exten_element, 'OTVocabularyElement', []);
                                 if (ot_voc_check.length === 0) {
-                                    return Error('Missing OTVocabularyElement for extension element!');
+                                    throw Error('Missing OTVocabularyElement for extension element!');
                                 }
-                                OTVocabularyElement_element = exten_element.OTVocabularyElement;
-
+                                const OTVocabularyElement_element =
+                                    exten_element.OTVocabularyElement;
 
+                                let temp_participant_id;
                                 const participant_id_check = findValuesHelper(OTVocabularyElement_element, 'id', []);
                                 if (participant_id_check.length === 0) {
-                                    return Error('Missing id for Participant element!');
+                                    throw Error('Missing id for Participant element!');
+                                } else {
+                                    temp_participant_id = OTVocabularyElement_element.id;
                                 }
-                                participant_id = OTVocabularyElement_element.id;
 
+                                if (!temp_participant_id.includes('urn:ot:mda:participant', 0) === true) {
+                                    throw Error('Invalid Participant ID');
+                                } else {
+                                    participant_id = temp_participant_id;
+                                }
 
                                 const attribute_check = findValuesHelper(OTVocabularyElement_element, 'attribute', []);
                                 if (attribute_check.length === 0) {
-                                    return Error('Missing attribute for Participant element!');
+                                    throw Error('Missing attribute for Participant element!');
                                 }
-                                attribute_elements = OTVocabularyElement_element.attribute;
+                                const attribute_elements = OTVocabularyElement_element.attribute;
 
+                                // console.log(OTVocabularyElement_element)
 
                                 participants_data = {};
 
                                 for (const zx in attribute_elements) {
                                     const attribute_el = attribute_elements[zx];
 
-                                    var value;
                                     const value_check = findValuesHelper(attribute_el, '_', []);
                                     if (value_check.length === 0) {
-                                        return Error('Missing value for attribute element!');
+                                        throw Error('Missing value for attribute element!');
                                     }
-                                    value = attribute_el._;
+                                    const value = attribute_el._;
 
 
-                                    var attr_id;
+                                    let attr_id;
+                                    let temp_attr_id;
                                     const attr_id_check = findValuesHelper(attribute_el, 'id', []);
                                     if (attr_id_check.length === 0) {
-                                        return Error('Missing id element for attribute element!');
+                                        throw Error('Missing id element for attribute element!');
+                                    } else {
+                                        temp_attr_id = attribute_el.id;
+                                    }
+                                    if (!temp_attr_id.includes('urn:ot:mda:participant', 0) === true) {
+                                        throw Error('Invalid Attribute ID');
+                                    } else {
+                                        attr_id = temp_attr_id.replace('urn:ot:mda:participant:', '');
                                     }
-                                    attr_id = attribute_el.id.replace('urn:ot:mda:participant:', '');
-
 
                                     participants_data[attr_id] = value;
                                 }
@@ -529,64 +784,74 @@ module.exports = () => ({
                                     .data = utilities.copyObject(participants_data);
                                 participants[participant_id].vertex_type = 'PARTICIPANT';
                                 participants[participant_id]._key = md5(`participant_${sender_id}_${participant_id}`);
-                            }
-
-
-                            var Object_elements;
-                            // ////OBJECT////////
-                            if (v_type === 'urn:ot:mda:object') {
-                                Object_elements = pro;
-
-                                var extensio_element;
+                            } else if (v_type === 'urn:ot:mda:object') {
+                                const Object_elements = pro;
+                                // ////OBJECT////////
                                 const extensio_check = findValuesHelper(Object_elements, 'extension', []);
                                 if (extensio_check.length === 0) {
-                                    return Error('Missing extension element for Object element!');
+                                    throw Error('Missing extension element for Object element!');
                                 }
-                                extensio_element = Object_elements.extension;
+                                const extensio_element = Object_elements.extension;
 
 
-                                var OTVocabularyEl;
                                 const OTVocabularyEl_check = findValuesHelper(extensio_element, 'OTVocabularyElement', []);
                                 if (OTVocabularyEl_check.length === 0) {
-                                    return Error('Missing OTVocabularyElement element for extension element!');
+                                    throw Error('Missing OTVocabularyElement element for extension element!');
                                 }
-                                OTVocabularyEl = extensio_element.OTVocabularyElement;
+                                const OTVocabularyEl = extensio_element.OTVocabularyElement;
 
 
-                                var object_id;
                                 const object_id_check = findValuesHelper(OTVocabularyEl, 'id', []);
                                 if (object_id_check.length === 0) {
-                                    return Error('Missing id element for OTVocabularyElement!');
+                                    throw Error('Missing id element for OTVocabularyElement!');
                                 }
-                                object_id = OTVocabularyEl.id;
+                                var object_id = OTVocabularyEl.id;
 
 
-                                var object_attribute_elements;
                                 const attribute_el_check = findValuesHelper(OTVocabularyEl, 'attribute', []);
                                 if (attribute_el_check.length === 0) {
-                                    return Error('Missing attribute element for OTVocabularyElement!');
+                                    throw Error('Missing attribute element for OTVocabularyElement!');
                                 }
-                                object_attribute_elements = OTVocabularyEl.attribute;
+                                const object_attribute_elements = OTVocabularyEl.attribute;
 
 
                                 for (const rr in object_attribute_elements) {
-                                    var single_attribute;
-                                    single_attribute = object_attribute_elements[rr];
+                                    const single_attribute = object_attribute_elements[rr];
 
-                                    var single_attribute_id;
+                                    let temp_single_attribute_id;
+                                    let single_attribute_id;
                                     const single_attribute_id_check = findValuesHelper(single_attribute, 'id', []);
                                     if (single_attribute_id_check.length === 0) {
-                                        return Error('Missing id element for attribute element!');
+                                        throw Error('Missing id element for attribute element!');
+                                    } else {
+                                        temp_single_attribute_id = single_attribute.id;
+                                    }
+
+                                    if (!temp_single_attribute_id.includes('urn:ot:mda:object:', 0) === true) {
+                                        throw Error('Invalid Attribute ID');
+                                    } else {
+                                        single_attribute_id = temp_single_attribute_id;
                                     }
-                                    single_attribute_id = single_attribute.id;
 
 
-                                    var single_attribute_value;
-                                    const single_attribute_value_check = findValuesHelper(single_attribute, '_', []);
+                                    // console.log(temp_single_attribute_id)
+
+                                    const single_attribute_value_check =
+                                            findValuesHelper(single_attribute, '_', []);
                                     if (single_attribute_value_check.length === 0) {
-                                        return Error('Missing value element for attribute element!');
+                                        throw Error('Missing value element for attribute element!');
+                                    }
+                                    const single_attribute_value = single_attribute._;
+
+
+                                    if (single_attribute_id === 'urn:ot:mda:object:ean13') {
+                                        const ean13_validation =
+                                            ean13Validation(single_attribute_value);
+                                        // console.log(ean13_validation)
+                                        if (!ean13_validation) {
+                                            throw Error('EAN13 code is not valid!');
+                                        }
                                     }
-                                    single_attribute_value = single_attribute._;
 
 
                                     object_data[single_attribute_id] = single_attribute_value;
@@ -602,70 +867,89 @@ module.exports = () => ({
                                     objects[object_id].vertex_type = 'OBJECT';
                                     objects[object_id]._key = md5(`object_${sender_id}_${object_id}`);
                                 }
-                            }
-
-                            var Batch_elements;
-                            // //////BATCH/////////
-                            if (v_type === 'urn:ot:mda:batch') {
-                                Batch_elements = pro;
+                            } else if (v_type === 'urn:ot:mda:batch') {
+                                const Batch_elements = pro;
+                                // //////BATCH/////////
 
-                                var batch_extension;
                                 const batch_extension_check = findValuesHelper(Batch_elements, 'extension', []);
                                 if (batch_extension_check.length === 0) {
-                                    return Error('Missing extension element for Batch element!');
+                                    throw Error('Missing extension element for Batch element!');
                                 }
-                                batch_extension = Batch_elements.extension;
+                                const batch_extension = Batch_elements.extension;
 
 
-                                var OTVoc_El_elements;
                                 const OTVoc_El_elements_check = findValuesHelper(batch_extension, 'OTVocabularyElement', []);
                                 if (OTVoc_El_elements_check.length === 0) {
-                                    return Error('Missing OTVocabularyElement element for extension element!');
+                                    throw Error('Missing OTVocabularyElement element for extension element!');
                                 }
-                                OTVoc_El_elements = batch_extension.OTVocabularyElement;
+                                const OTVoc_El_elements = batch_extension.OTVocabularyElement;
 
 
-                                var ot_vocabulary_element;
+                                let ot_vocabulary_element;
                                 for (const g in OTVoc_El_elements) {
+                                    let object_id_instance = false;
+                                    let valid_attribute = false;
                                     ot_vocabulary_element = OTVoc_El_elements[g];
 
-                                    var batch_id;
                                     const batch_id_element_check = findValuesHelper(ot_vocabulary_element, 'id', []);
                                     if (batch_id_element_check.length === 0) {
-                                        return Error('Missing id element for OTVocabularyElement!');
+                                        throw Error('Missing id element for OTVocabularyElement!');
                                     }
-                                    batch_id = ot_vocabulary_element.id;
+                                    const batch_id = ot_vocabulary_element.id;
 
 
-                                    var batch_attribute_el;
                                     const batch_attribute_el_check = findValuesHelper(ot_vocabulary_element, 'attribute', []);
                                     if (batch_attribute_el_check.length === 0) {
-                                        return Error('Missing attribute element for OTVocabularyElement!');
+                                        throw Error('Missing attribute element for OTVocabularyElement!');
                                     }
-                                    batch_attribute_el = ot_vocabulary_element.attribute;
+                                    const batch_attribute_el = ot_vocabulary_element.attribute;
 
 
-                                    var single;
+                                    let single;
                                     for (const one in batch_attribute_el) {
                                         single = batch_attribute_el[one];
 
-                                        var batch_attribute_id;
+                                        var temp_batch_attribute_id;
                                         const batch_attribute_id_check = findValuesHelper(single, 'id', []);
                                         if (batch_attribute_id_check.length === 0) {
-                                            return Error('Missing id element for attribute element!');
+                                            throw Error('Missing id element for attribute element!');
+                                        } else {
+                                            temp_batch_attribute_id = single.id;
                                         }
-                                        batch_attribute_id = single.id;
 
 
-                                        var batch_attribute_value;
+                                        if (temp_batch_attribute_id.includes('urn:ot:mda:batch:objectid', 0) && object_id_instance === false) {
+                                            object_id_instance = true;
+                                        } else if (temp_batch_attribute_id.includes('urn:ot:mda:batch:', 0)) {
+                                            valid_attribute = true;
+                                        } else {
+                                            throw Error('Invalid Attribute ID');
+                                        }
+
                                         const batch_attribute_value_check = findValuesHelper(single, '_', []);
                                         if (batch_attribute_value_check.length === 0) {
-                                            return Error('Missing value element for attribute element!');
+                                            throw Error('Missing value element for attribute element!');
                                         }
-                                        batch_attribute_value = single._;
+                                        const batch_attribute_value = single._;
 
+                                        if (temp_batch_attribute_id === 'urn:ot:mda:batch:productiondate') {
+                                            const production_date_validation =
+                                                dateTimeValidation(batch_attribute_value);
+                                            if (!production_date_validation) {
+                                                throw Error('Invalid date and time format for production date!');
+                                            }
+                                        }
 
-                                        batch_data[batch_attribute_id] = batch_attribute_value;
+                                        if (temp_batch_attribute_id === 'urn:ot:mda:batch:expirationdate') {
+                                            const expiration_date_validation =
+                                                dateTimeValidation(batch_attribute_value);
+                                            if (!expiration_date_validation) {
+                                                throw Error('Invalid date and time format for expiration date!');
+                                            }
+                                        }
+
+
+                                        batch_data[temp_batch_attribute_id] = batch_attribute_value;
 
                                         const new_obj = {};
                                         const sanitized_batch_data = sanitize(batch_data, new_obj, ['urn:', 'ot:', 'mda:', 'batch:']);
@@ -689,7 +973,20 @@ module.exports = () => ({
                                         batches[batch_id].vertex_type = 'BATCH';
                                         batches[batch_id]._key = md5(`batch_${sender_id}_${batch_id}`);
                                     }
+
+
+                                    // console.log(valid_attribute)
+
+                                    if (!object_id_instance) {
+                                        throw Error('Missing Object ID');
+                                    } else if (valid_attribute) {
+                                        // batch_attribute_id = temp_batch_attribute_id;
+                                    } else {
+                                        throw Error('Invalid Attribute ID');
+                                    }
                                 }
+                            } else {
+                                throw Error('Invalid Vocabulary type');
                             }
                         }
                     }
@@ -701,7 +998,7 @@ module.exports = () => ({
                     const body_element = EPCISDocument_element.EPCISBody;
 
                     if (findValuesHelper(result, 'EventList', []).length === 0) {
-                        return Error('Missing EventList element');
+                        throw Error('Missing EventList element');
                     }
 
                     var event_list_element = body_element.EventList;
@@ -725,24 +1022,29 @@ module.exports = () => ({
                             if (event_type === 'ObjectEvent') {
                                 // eventTime
                                 if (findValuesHelper(event, 'eventTime', []).length === 0) {
-                                    return Error('Missing eventTime element for event!');
+                                    throw Error('Missing eventTime element for event!');
                                 }
 
                                 const event_time = event.eventTime;
 
+                                var event_time_validation = dateTimeValidation(event_time);
+                                if (!event_time_validation) {
+                                    throw Error('Invalid date and time format for event time!');
+                                }
+
                                 if (typeof event_time !== 'string') {
-                                    return Error('Multiple eventTime elements found!');
+                                    throw Error('Multiple eventTime elements found!');
                                 }
 
                                 // eventTimeZoneOffset
                                 if (findValuesHelper(event, 'eventTimeZoneOffset', []).length === 0) {
-                                    return Error('Missing event_time_zone_offset element for event!');
+                                    throw Error('Missing event_time_zone_offset element for event!');
                                 }
 
                                 const event_time_zone_offset = event.eventTimeZoneOffset;
 
                                 if (typeof event_time_zone_offset !== 'string') {
-                                    return Error('Multiple event_time_zone_offset elements found!');
+                                    throw Error('Multiple event_time_zone_offset elements found!');
                                 }
 
                                 let event_id = `${sender_id}:${event_time}Z${event_time_zone_offset}`;
@@ -753,7 +1055,7 @@ module.exports = () => ({
 
 
                                     if (findValuesHelper(baseExtension_element, 'eventID', []).length === 0) {
-                                        return Error('Missing eventID in baseExtension!');
+                                        throw Error('Missing eventID in baseExtension!');
                                     }
 
                                     event_id = baseExtension_element.eventID;
@@ -761,13 +1063,13 @@ module.exports = () => ({
 
                                 // epcList
                                 if (findValuesHelper(event, 'epcList', []).length === 0) {
-                                    return Error('Missing epcList element for event!');
+                                    throw Error('Missing epcList element for event!');
                                 }
 
                                 const { epcList } = event;
 
                                 if (findValuesHelper(epcList, 'epc', []).length === 0) {
-                                    return Error('Missing epc element in epcList for event!');
+                                    throw Error('Missing epc element in epcList for event!');
                                 }
 
                                 const { epc } = epcList;
@@ -784,7 +1086,7 @@ module.exports = () => ({
                                     const read_point_element = event.readPoint;
 
                                     if (findValuesHelper(read_point_element, 'id', []).length === 0) {
-                                        return Error('Missing id for readPoint!');
+                                        throw Error('Missing id for readPoint!');
                                     }
 
                                     read_point = read_point_element.id;
@@ -797,12 +1099,43 @@ module.exports = () => ({
                                     const biz_location_element = event.bizLocation;
 
                                     if (findValuesHelper(biz_location_element, 'id', []).length === 0) {
-                                        return Error('Missing id for bizLocation!');
+                                        throw Error('Missing id for bizLocation!');
                                     }
 
                                     biz_location = biz_location_element.id;
                                 }
 
+                                // extension
+                                if (findValuesHelper(event, 'extension', []).length !== 0) {
+                                    const obj_event_extension_element = event.extension;
+                                    const quantityElement_element =
+                                        obj_event_extension_element.quantityList.quantityElement;
+                                    const extensionElement_extension =
+                                        obj_event_extension_element.extension;
+
+                                    for (const element in quantityElement_element) {
+                                        const single_element = quantityElement_element[element];
+
+                                        const { quantity } = single_element;
+
+                                        const quantity_validation = numberValidation(quantity);
+                                        if (!quantity_validation) {
+                                            throw Error('Invalid format for quantity element!');
+                                        }
+                                    }
+
+
+                                    for (const element in extensionElement_extension) {
+                                        const temperature = extensionElement_extension[element];
+
+                                        const temperature_validation =
+                                            numberValidation(temperature);
+                                        if (!temperature_validation) {
+                                            throw Error('Invalid format for temperature element!');
+                                        }
+                                    }
+                                }
+
                                 const object_event = {
                                     identifiers: {
                                         event_id,
@@ -844,24 +1177,24 @@ module.exports = () => ({
                             } else if (event_type === 'AggregationEvent') {
                                 // eventTime
                                 if (findValuesHelper(event, 'eventTime', []).length === 0) {
-                                    return Error('Missing eventTime element for event!');
+                                    throw Error('Missing eventTime element for event!');
                                 }
 
                                 const event_time = event.eventTime;
 
                                 if (typeof event_time !== 'string') {
-                                    return Error('Multiple eventTime elements found!');
+                                    throw Error('Multiple eventTime elements found!');
                                 }
 
                                 // eventTimeZoneOffset
                                 if (findValuesHelper(event, 'eventTimeZoneOffset', []).length === 0) {
-                                    return Error('Missing event_time_zone_offset element for event!');
+                                    throw Error('Missing event_time_zone_offset element for event!');
                                 }
 
                                 const event_time_zone_offset = event.eventTimeZoneOffset;
 
                                 if (typeof event_time_zone_offset !== 'string') {
-                                    return Error('Multiple event_time_zone_offset elements found!');
+                                    throw Error('Multiple event_time_zone_offset elements found!');
                                 }
 
                                 let event_id = `${sender_id}:${event_time}Z${event_time_zone_offset}`;
@@ -872,7 +1205,7 @@ module.exports = () => ({
 
 
                                     if (findValuesHelper(baseExtension_element, 'eventID', []).length === 0) {
-                                        return Error('Missing eventID in baseExtension!');
+                                        throw Error('Missing eventID in baseExtension!');
                                     }
 
                                     event_id = baseExtension_element.eventID;
@@ -880,7 +1213,7 @@ module.exports = () => ({
 
                                 // parentID
                                 if (findValuesHelper(event, 'parentID', []).length === 0) {
-                                    return Error('Missing parentID element for Aggregation event!');
+                                    throw Error('Missing parentID element for Aggregation event!');
                                 }
 
                                 const parent_id = event.parentID;
@@ -889,13 +1222,13 @@ module.exports = () => ({
                                 let child_epcs = [];
 
                                 if (findValuesHelper(event, 'childEPCs', []).length === 0) {
-                                    return Error('Missing childEPCs element for event!');
+                                    throw Error('Missing childEPCs element for event!');
                                 }
 
                                 const epcList = event.childEPCs;
 
                                 if (findValuesHelper(epcList, 'epc', []).length === 0) {
-                                    return Error('Missing epc element in epcList for event!');
+                                    throw Error('Missing epc element in epcList for event!');
                                 }
 
                                 const { epc } = epcList;
@@ -912,7 +1245,7 @@ module.exports = () => ({
                                     const read_point_element = event.readPoint;
 
                                     if (findValuesHelper(read_point_element, 'id', []).length === 0) {
-                                        return Error('Missing id for readPoint!');
+                                        throw Error('Missing id for readPoint!');
                                     }
 
                                     read_point = read_point_element.id;
@@ -924,7 +1257,7 @@ module.exports = () => ({
                                     const biz_location_element = event.bizLocation;
 
                                     if (findValuesHelper(biz_location_element, 'id', []).length === 0) {
-                                        return Error('Missing id for bizLocation!');
+                                        throw Error('Missing id for bizLocation!');
                                     }
 
                                     biz_location = biz_location_element.id;
@@ -942,7 +1275,7 @@ module.exports = () => ({
 
 
                                 aggregation_events[event_id] =
-                                    utilities.copyObject(aggregation_event);
+                                        utilities.copyObject(aggregation_event);
 
                                 for (const bi in child_epcs) {
                                     child_batches_edges.push({
@@ -997,7 +1330,7 @@ module.exports = () => ({
                                         if (ext_event_type === 'TransformationEvent') {
                                             // eventTime
                                             if (findValuesHelper(ext_event, 'transformationID', []).length === 0) {
-                                                return Error('Missing transformationID element for event!');
+                                                throw Error('Missing transformationID element for event!');
                                             }
 
                                             const ext_event_id = ext_event.transformationID;
@@ -1006,13 +1339,13 @@ module.exports = () => ({
                                             let input_epcs = [];
 
                                             if (findValuesHelper(ext_event, 'inputEPCList', []).length === 0) {
-                                                return Error('Missing inputEPCList element for event!');
+                                                throw Error('Missing inputEPCList element for event!');
                                             }
 
                                             const epcList = ext_event.inputEPCList;
 
                                             if (findValuesHelper(epcList, 'epc', []).length === 0) {
-                                                return Error('Missing epc element in epcList for event!');
+                                                throw Error('Missing epc element in epcList for event!');
                                             }
 
                                             const { epc } = epcList;
@@ -1030,7 +1363,7 @@ module.exports = () => ({
                                                 const epcList = ext_event.outputEPCList;
 
                                                 if (findValuesHelper(epcList, 'epc', []).length === 0) {
-                                                    return Error('Missing epc element in epcList for event!');
+                                                    throw Error('Missing epc element in epcList for event!');
                                                 }
 
                                                 const { epc } = epcList;
@@ -1049,7 +1382,7 @@ module.exports = () => ({
                                                 const read_point_element = ext_event.readPoint;
 
                                                 if (findValuesHelper(read_point_element, 'id', []).length === 0) {
-                                                    return Error('Missing id for readPoint!');
+                                                    throw Error('Missing id for readPoint!');
                                                 }
 
                                                 read_point = read_point_element.id;
@@ -1066,7 +1399,7 @@ module.exports = () => ({
                                             };
 
                                             transformation_events[ext_event_id] =
-                                                utilities.copyObject(transformation_event);
+                                                    utilities.copyObject(transformation_event);
 
                                             // bizLocation
                                             let biz_location;
@@ -1076,10 +1409,10 @@ module.exports = () => ({
                                                 [],
                                             ).length !== 0) {
                                                 const biz_location_element =
-                                                    ext_event.bizLocation;
+                                                        ext_event.bizLocation;
 
                                                 if (findValuesHelper(biz_location_element, 'id', []).length === 0) {
-                                                    return Error('Missing id for bizLocation!');
+                                                    throw Error('Missing id for bizLocation!');
                                                 }
 
                                                 biz_location = biz_location_element.id;
@@ -1123,21 +1456,21 @@ module.exports = () => ({
                                                 });
                                             }
                                         } else {
-                                            return Error(`Unsupported event type: ${event_type}`);
+                                            throw Error(`Unsupported event type: ${event_type}`);
                                         }
                                     }
                                 }
                             } else {
-                                return Error(`Unsupported event type: ${event_type}`);
+                                throw Error(`Unsupported event type: ${event_type}`);
                             }
                         }
                     }
 
-                    var vertices_list = [];
-                    var edges_list = [];
-                    var import_id = Date.now();
+                    const vertices_list = [];
+                    const edges_list = [];
+                    const import_id = Date.now();
 
-                    var temp_participants = [];
+                    const temp_participants = [];
                     for (const i in participants) {
                         temp_participants.push(participants[i]);
                         vertices_list.push(participants[i]);
@@ -1160,7 +1493,7 @@ module.exports = () => ({
                         console.log('Writing participants complete');
                     });
 
-                    var temp_objects = [];
+                    const temp_objects = [];
                     for (const i in objects) {
                         temp_objects.push(objects[i]);
                         vertices_list.push(objects[i]);
@@ -1176,7 +1509,7 @@ module.exports = () => ({
                         console.log('Writing objects complete');
                     });
 
-                    var temp_locations = [];
+                    const temp_locations = [];
                     for (const i in locations) {
                         temp_locations.push(locations[i]);
                         vertices_list.push(locations[i]);
@@ -1192,7 +1525,7 @@ module.exports = () => ({
                         console.log('Writing business locations complete');
                     });
 
-                    var temp_batches = [];
+                    const temp_batches = [];
                     for (const i in batches) {
                         temp_batches.push(batches[i]);
                         vertices_list.push(batches[i]);
@@ -1209,7 +1542,7 @@ module.exports = () => ({
                     });
 
 
-                    var temp_object_events = [];
+                    const temp_object_events = [];
                     for (const i in object_events) {
                         temp_object_events.push(object_events[i]);
                         vertices_list.push(object_events[i]);
@@ -1225,7 +1558,7 @@ module.exports = () => ({
                         console.log('Writing object events complete');
                     });
 
-                    var temp_aggregation_events = [];
+                    const temp_aggregation_events = [];
                     for (const i in aggregation_events) {
                         temp_aggregation_events.push(aggregation_events[i]);
                         vertices_list.push(aggregation_events[i]);
@@ -1241,7 +1574,7 @@ module.exports = () => ({
                         console.log('Writing aggregation events complete');
                     });
 
-                    var temp_transformation_events = [];
+                    const temp_transformation_events = [];
                     for (const i in transformation_events) {
                         temp_transformation_events.push(transformation_events[i]);
                         vertices_list.push(transformation_events[i]);
diff --git a/package.json b/package.json
index 875fee6..226e9f0 100644
--- a/package.json
+++ b/package.json
@@ -57,6 +57,7 @@
     "knex": "^0.14.5",
     "leveldown": "^3.0.0",
     "levelup": "^2.0.2",
+    "libxml-xsd": "^0.5.2",
     "lodash": "^4.17.5",
     "md5": "^2.2.1",
     "ms": "^2.1.1",
@@ -72,8 +73,9 @@
     "solidity-sha3": "^0.4.1",
     "sqldown": "^2.1.0",
     "sqlite3": "^4.0.0",
-    "superagent": "^3.8.2",
     "utf8-length": "latest",
+    "validator": "^9.4.1",
+    "superagent": "^3.8.2",
     "web3": "^1.0.0-beta.33",
     "winston": "^2.4.1",
     "xml2js": "^0.4.19"
-- 
2.13.5 (Apple Git-94)

